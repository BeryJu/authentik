trigger:
  - master
  - next
  - version-*

variables:
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}:
    branchName: ${{ replace(variables['System.PullRequest.SourceBranch'], '/', '-') }}
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/') }}:
    branchName: ${{ replace(variables['Build.SourceBranchName'], 'refs/heads/', '') }}

stages:
  - stage: generate
    jobs:
      - job: swagger_generate
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: GoTool@0
            inputs:
              version: '1.15'
          - task: CmdLine@2
            inputs:
              script: |
                sudo apt install gnupg ca-certificates
                sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 379CE192D401AB61
                echo "deb https://dl.bintray.com/go-swagger/goswagger-debian ubuntu main" | sudo tee /etc/apt/sources.list.d/goswagger.list
                sudo apt update
                sudo apt install swagger
                mkdir -p $(go env GOPATH)
                swagger generate client -f ../swagger.yaml -A authentik -t pkg/
              workingDirectory: 'outpost/'
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: 'outpost/pkg/'
              artifact: 'swagger_client'
              publishLocation: 'pipeline'
  - stage: lint
    jobs:
      - job: golint
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: GoTool@0
            inputs:
              version: '1.15'
          - task: Go@0
            inputs:
              command: 'get'
              arguments: '-u golang.org/x/lint/golint'
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'swagger_client'
              path: "outpost/pkg/"
          - task: CmdLine@2
            inputs:
              script: |
                $(go list -f {{.Target}} golang.org/x/lint/golint) ./...
              workingDirectory: 'outpost/'
  - stage: proxy_build_go
    jobs:
      - job: build_go
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: GoTool@0
            inputs:
              version: '1.15'
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'swagger_client'
              path: "outpost/pkg/"
          - task: Go@0
            inputs:
              command: 'build'
              arguments: './cmd/proxy'
              workingDirectory: 'outpost/'
  - stage: proxy_build_docker
    jobs:
      - job: build
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: GoTool@0
            inputs:
              version: '1.15'
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'swagger_client'
              path: "outpost/pkg/"
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                python ./scripts/az_do_set_branch.py
          - task: Docker@2
            inputs:
              containerRegistry: 'GHCR'
              repository: 'beryju/authentik-proxy'
              command: 'buildAndPush'
              Dockerfile: 'outpost/proxy.Dockerfile'
              buildContext: 'outpost/'
              tags: "gh-$(branchName)"
