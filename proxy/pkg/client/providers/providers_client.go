// Code generated by go-swagger; DO NOT EDIT.

package providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new providers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for providers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ProvidersAllList(params *ProvidersAllListParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersAllListOK, error)

	ProvidersAllRead(params *ProvidersAllReadParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersAllReadOK, error)

	ProvidersOauth2Create(params *ProvidersOauth2CreateParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersOauth2CreateCreated, error)

	ProvidersOauth2Delete(params *ProvidersOauth2DeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersOauth2DeleteNoContent, error)

	ProvidersOauth2List(params *ProvidersOauth2ListParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersOauth2ListOK, error)

	ProvidersOauth2PartialUpdate(params *ProvidersOauth2PartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersOauth2PartialUpdateOK, error)

	ProvidersOauth2Read(params *ProvidersOauth2ReadParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersOauth2ReadOK, error)

	ProvidersOauth2Update(params *ProvidersOauth2UpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersOauth2UpdateOK, error)

	ProvidersProxyCreate(params *ProvidersProxyCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersProxyCreateCreated, error)

	ProvidersProxyDelete(params *ProvidersProxyDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersProxyDeleteNoContent, error)

	ProvidersProxyList(params *ProvidersProxyListParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersProxyListOK, error)

	ProvidersProxyPartialUpdate(params *ProvidersProxyPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersProxyPartialUpdateOK, error)

	ProvidersProxyRead(params *ProvidersProxyReadParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersProxyReadOK, error)

	ProvidersProxyUpdate(params *ProvidersProxyUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersProxyUpdateOK, error)

	ProvidersSamlCreate(params *ProvidersSamlCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersSamlCreateCreated, error)

	ProvidersSamlDelete(params *ProvidersSamlDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersSamlDeleteNoContent, error)

	ProvidersSamlList(params *ProvidersSamlListParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersSamlListOK, error)

	ProvidersSamlPartialUpdate(params *ProvidersSamlPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersSamlPartialUpdateOK, error)

	ProvidersSamlRead(params *ProvidersSamlReadParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersSamlReadOK, error)

	ProvidersSamlUpdate(params *ProvidersSamlUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersSamlUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ProvidersAllList Provider Viewset
*/
func (a *Client) ProvidersAllList(params *ProvidersAllListParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersAllListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvidersAllListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "providers_all_list",
		Method:             "GET",
		PathPattern:        "/providers/all/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProvidersAllListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvidersAllListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for providers_all_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProvidersAllRead Provider Viewset
*/
func (a *Client) ProvidersAllRead(params *ProvidersAllReadParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersAllReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvidersAllReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "providers_all_read",
		Method:             "GET",
		PathPattern:        "/providers/all/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProvidersAllReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvidersAllReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for providers_all_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProvidersOauth2Create OAuth2Provider Viewset
*/
func (a *Client) ProvidersOauth2Create(params *ProvidersOauth2CreateParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersOauth2CreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvidersOauth2CreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "providers_oauth2_create",
		Method:             "POST",
		PathPattern:        "/providers/oauth2/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProvidersOauth2CreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvidersOauth2CreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for providers_oauth2_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProvidersOauth2Delete OAuth2Provider Viewset
*/
func (a *Client) ProvidersOauth2Delete(params *ProvidersOauth2DeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersOauth2DeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvidersOauth2DeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "providers_oauth2_delete",
		Method:             "DELETE",
		PathPattern:        "/providers/oauth2/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProvidersOauth2DeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvidersOauth2DeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for providers_oauth2_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProvidersOauth2List OAuth2Provider Viewset
*/
func (a *Client) ProvidersOauth2List(params *ProvidersOauth2ListParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersOauth2ListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvidersOauth2ListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "providers_oauth2_list",
		Method:             "GET",
		PathPattern:        "/providers/oauth2/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProvidersOauth2ListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvidersOauth2ListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for providers_oauth2_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProvidersOauth2PartialUpdate OAuth2Provider Viewset
*/
func (a *Client) ProvidersOauth2PartialUpdate(params *ProvidersOauth2PartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersOauth2PartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvidersOauth2PartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "providers_oauth2_partial_update",
		Method:             "PATCH",
		PathPattern:        "/providers/oauth2/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProvidersOauth2PartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvidersOauth2PartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for providers_oauth2_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProvidersOauth2Read OAuth2Provider Viewset
*/
func (a *Client) ProvidersOauth2Read(params *ProvidersOauth2ReadParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersOauth2ReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvidersOauth2ReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "providers_oauth2_read",
		Method:             "GET",
		PathPattern:        "/providers/oauth2/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProvidersOauth2ReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvidersOauth2ReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for providers_oauth2_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProvidersOauth2Update OAuth2Provider Viewset
*/
func (a *Client) ProvidersOauth2Update(params *ProvidersOauth2UpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersOauth2UpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvidersOauth2UpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "providers_oauth2_update",
		Method:             "PUT",
		PathPattern:        "/providers/oauth2/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProvidersOauth2UpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvidersOauth2UpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for providers_oauth2_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProvidersProxyCreate ProxyProvider Viewset
*/
func (a *Client) ProvidersProxyCreate(params *ProvidersProxyCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersProxyCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvidersProxyCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "providers_proxy_create",
		Method:             "POST",
		PathPattern:        "/providers/proxy/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProvidersProxyCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvidersProxyCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for providers_proxy_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProvidersProxyDelete ProxyProvider Viewset
*/
func (a *Client) ProvidersProxyDelete(params *ProvidersProxyDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersProxyDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvidersProxyDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "providers_proxy_delete",
		Method:             "DELETE",
		PathPattern:        "/providers/proxy/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProvidersProxyDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvidersProxyDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for providers_proxy_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProvidersProxyList ProxyProvider Viewset
*/
func (a *Client) ProvidersProxyList(params *ProvidersProxyListParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersProxyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvidersProxyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "providers_proxy_list",
		Method:             "GET",
		PathPattern:        "/providers/proxy/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProvidersProxyListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvidersProxyListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for providers_proxy_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProvidersProxyPartialUpdate ProxyProvider Viewset
*/
func (a *Client) ProvidersProxyPartialUpdate(params *ProvidersProxyPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersProxyPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvidersProxyPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "providers_proxy_partial_update",
		Method:             "PATCH",
		PathPattern:        "/providers/proxy/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProvidersProxyPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvidersProxyPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for providers_proxy_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProvidersProxyRead ProxyProvider Viewset
*/
func (a *Client) ProvidersProxyRead(params *ProvidersProxyReadParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersProxyReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvidersProxyReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "providers_proxy_read",
		Method:             "GET",
		PathPattern:        "/providers/proxy/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProvidersProxyReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvidersProxyReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for providers_proxy_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProvidersProxyUpdate ProxyProvider Viewset
*/
func (a *Client) ProvidersProxyUpdate(params *ProvidersProxyUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersProxyUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvidersProxyUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "providers_proxy_update",
		Method:             "PUT",
		PathPattern:        "/providers/proxy/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProvidersProxyUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvidersProxyUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for providers_proxy_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProvidersSamlCreate SAMLProvider Viewset
*/
func (a *Client) ProvidersSamlCreate(params *ProvidersSamlCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersSamlCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvidersSamlCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "providers_saml_create",
		Method:             "POST",
		PathPattern:        "/providers/saml/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProvidersSamlCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvidersSamlCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for providers_saml_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProvidersSamlDelete SAMLProvider Viewset
*/
func (a *Client) ProvidersSamlDelete(params *ProvidersSamlDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersSamlDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvidersSamlDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "providers_saml_delete",
		Method:             "DELETE",
		PathPattern:        "/providers/saml/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProvidersSamlDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvidersSamlDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for providers_saml_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProvidersSamlList SAMLProvider Viewset
*/
func (a *Client) ProvidersSamlList(params *ProvidersSamlListParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersSamlListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvidersSamlListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "providers_saml_list",
		Method:             "GET",
		PathPattern:        "/providers/saml/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProvidersSamlListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvidersSamlListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for providers_saml_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProvidersSamlPartialUpdate SAMLProvider Viewset
*/
func (a *Client) ProvidersSamlPartialUpdate(params *ProvidersSamlPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersSamlPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvidersSamlPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "providers_saml_partial_update",
		Method:             "PATCH",
		PathPattern:        "/providers/saml/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProvidersSamlPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvidersSamlPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for providers_saml_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProvidersSamlRead SAMLProvider Viewset
*/
func (a *Client) ProvidersSamlRead(params *ProvidersSamlReadParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersSamlReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvidersSamlReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "providers_saml_read",
		Method:             "GET",
		PathPattern:        "/providers/saml/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProvidersSamlReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvidersSamlReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for providers_saml_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProvidersSamlUpdate SAMLProvider Viewset
*/
func (a *Client) ProvidersSamlUpdate(params *ProvidersSamlUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ProvidersSamlUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvidersSamlUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "providers_saml_update",
		Method:             "PUT",
		PathPattern:        "/providers/saml/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProvidersSamlUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvidersSamlUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for providers_saml_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
