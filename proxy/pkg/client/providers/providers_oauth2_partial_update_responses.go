// Code generated by go-swagger; DO NOT EDIT.

package providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/BeryJu/passbook/proxy/pkg/models"
)

// ProvidersOauth2PartialUpdateReader is a Reader for the ProvidersOauth2PartialUpdate structure.
type ProvidersOauth2PartialUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProvidersOauth2PartialUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProvidersOauth2PartialUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewProvidersOauth2PartialUpdateOK creates a ProvidersOauth2PartialUpdateOK with default headers values
func NewProvidersOauth2PartialUpdateOK() *ProvidersOauth2PartialUpdateOK {
	return &ProvidersOauth2PartialUpdateOK{}
}

/*ProvidersOauth2PartialUpdateOK handles this case with default header values.

ProvidersOauth2PartialUpdateOK providers oauth2 partial update o k
*/
type ProvidersOauth2PartialUpdateOK struct {
	Payload *models.OAuth2Provider
}

func (o *ProvidersOauth2PartialUpdateOK) Error() string {
	return fmt.Sprintf("[PATCH /providers/oauth2/{id}/][%d] providersOauth2PartialUpdateOK  %+v", 200, o.Payload)
}

func (o *ProvidersOauth2PartialUpdateOK) GetPayload() *models.OAuth2Provider {
	return o.Payload
}

func (o *ProvidersOauth2PartialUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OAuth2Provider)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
