// Code generated by go-swagger; DO NOT EDIT.

package stages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/BeryJu/passbook/proxy/pkg/models"
)

// StagesPromptStagesPartialUpdateReader is a Reader for the StagesPromptStagesPartialUpdate structure.
type StagesPromptStagesPartialUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StagesPromptStagesPartialUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStagesPromptStagesPartialUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewStagesPromptStagesPartialUpdateOK creates a StagesPromptStagesPartialUpdateOK with default headers values
func NewStagesPromptStagesPartialUpdateOK() *StagesPromptStagesPartialUpdateOK {
	return &StagesPromptStagesPartialUpdateOK{}
}

/*StagesPromptStagesPartialUpdateOK handles this case with default header values.

StagesPromptStagesPartialUpdateOK stages prompt stages partial update o k
*/
type StagesPromptStagesPartialUpdateOK struct {
	Payload *models.PromptStage
}

func (o *StagesPromptStagesPartialUpdateOK) Error() string {
	return fmt.Sprintf("[PATCH /stages/prompt/stages/{pbm_uuid}/][%d] stagesPromptStagesPartialUpdateOK  %+v", 200, o.Payload)
}

func (o *StagesPromptStagesPartialUpdateOK) GetPayload() *models.PromptStage {
	return o.Payload
}

func (o *StagesPromptStagesPartialUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PromptStage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
