// Code generated by go-swagger; DO NOT EDIT.

package stages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewStagesCaptchaReadParams creates a new StagesCaptchaReadParams object
// with the default values initialized.
func NewStagesCaptchaReadParams() *StagesCaptchaReadParams {
	var ()
	return &StagesCaptchaReadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStagesCaptchaReadParamsWithTimeout creates a new StagesCaptchaReadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStagesCaptchaReadParamsWithTimeout(timeout time.Duration) *StagesCaptchaReadParams {
	var ()
	return &StagesCaptchaReadParams{

		timeout: timeout,
	}
}

// NewStagesCaptchaReadParamsWithContext creates a new StagesCaptchaReadParams object
// with the default values initialized, and the ability to set a context for a request
func NewStagesCaptchaReadParamsWithContext(ctx context.Context) *StagesCaptchaReadParams {
	var ()
	return &StagesCaptchaReadParams{

		Context: ctx,
	}
}

// NewStagesCaptchaReadParamsWithHTTPClient creates a new StagesCaptchaReadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStagesCaptchaReadParamsWithHTTPClient(client *http.Client) *StagesCaptchaReadParams {
	var ()
	return &StagesCaptchaReadParams{
		HTTPClient: client,
	}
}

/*StagesCaptchaReadParams contains all the parameters to send to the API endpoint
for the stages captcha read operation typically these are written to a http.Request
*/
type StagesCaptchaReadParams struct {

	/*StageUUID
	  A UUID string identifying this Captcha Stage.

	*/
	StageUUID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the stages captcha read params
func (o *StagesCaptchaReadParams) WithTimeout(timeout time.Duration) *StagesCaptchaReadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stages captcha read params
func (o *StagesCaptchaReadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stages captcha read params
func (o *StagesCaptchaReadParams) WithContext(ctx context.Context) *StagesCaptchaReadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stages captcha read params
func (o *StagesCaptchaReadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stages captcha read params
func (o *StagesCaptchaReadParams) WithHTTPClient(client *http.Client) *StagesCaptchaReadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stages captcha read params
func (o *StagesCaptchaReadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithStageUUID adds the stageUUID to the stages captcha read params
func (o *StagesCaptchaReadParams) WithStageUUID(stageUUID strfmt.UUID) *StagesCaptchaReadParams {
	o.SetStageUUID(stageUUID)
	return o
}

// SetStageUUID adds the stageUuid to the stages captcha read params
func (o *StagesCaptchaReadParams) SetStageUUID(stageUUID strfmt.UUID) {
	o.StageUUID = stageUUID
}

// WriteToRequest writes these params to a swagger request
func (o *StagesCaptchaReadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param stage_uuid
	if err := r.SetPathParam("stage_uuid", o.StageUUID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
