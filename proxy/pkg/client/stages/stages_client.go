// Code generated by go-swagger; DO NOT EDIT.

package stages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new stages API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for stages API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	StagesAllList(params *StagesAllListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesAllListOK, error)

	StagesAllRead(params *StagesAllReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesAllReadOK, error)

	StagesCaptchaCreate(params *StagesCaptchaCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesCaptchaCreateCreated, error)

	StagesCaptchaDelete(params *StagesCaptchaDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesCaptchaDeleteNoContent, error)

	StagesCaptchaList(params *StagesCaptchaListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesCaptchaListOK, error)

	StagesCaptchaPartialUpdate(params *StagesCaptchaPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesCaptchaPartialUpdateOK, error)

	StagesCaptchaRead(params *StagesCaptchaReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesCaptchaReadOK, error)

	StagesCaptchaUpdate(params *StagesCaptchaUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesCaptchaUpdateOK, error)

	StagesConsentCreate(params *StagesConsentCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesConsentCreateCreated, error)

	StagesConsentDelete(params *StagesConsentDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesConsentDeleteNoContent, error)

	StagesConsentList(params *StagesConsentListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesConsentListOK, error)

	StagesConsentPartialUpdate(params *StagesConsentPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesConsentPartialUpdateOK, error)

	StagesConsentRead(params *StagesConsentReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesConsentReadOK, error)

	StagesConsentUpdate(params *StagesConsentUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesConsentUpdateOK, error)

	StagesDummyCreate(params *StagesDummyCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesDummyCreateCreated, error)

	StagesDummyDelete(params *StagesDummyDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesDummyDeleteNoContent, error)

	StagesDummyList(params *StagesDummyListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesDummyListOK, error)

	StagesDummyPartialUpdate(params *StagesDummyPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesDummyPartialUpdateOK, error)

	StagesDummyRead(params *StagesDummyReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesDummyReadOK, error)

	StagesDummyUpdate(params *StagesDummyUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesDummyUpdateOK, error)

	StagesEmailCreate(params *StagesEmailCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesEmailCreateCreated, error)

	StagesEmailDelete(params *StagesEmailDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesEmailDeleteNoContent, error)

	StagesEmailList(params *StagesEmailListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesEmailListOK, error)

	StagesEmailPartialUpdate(params *StagesEmailPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesEmailPartialUpdateOK, error)

	StagesEmailRead(params *StagesEmailReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesEmailReadOK, error)

	StagesEmailUpdate(params *StagesEmailUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesEmailUpdateOK, error)

	StagesIdentificationCreate(params *StagesIdentificationCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesIdentificationCreateCreated, error)

	StagesIdentificationDelete(params *StagesIdentificationDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesIdentificationDeleteNoContent, error)

	StagesIdentificationList(params *StagesIdentificationListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesIdentificationListOK, error)

	StagesIdentificationPartialUpdate(params *StagesIdentificationPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesIdentificationPartialUpdateOK, error)

	StagesIdentificationRead(params *StagesIdentificationReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesIdentificationReadOK, error)

	StagesIdentificationUpdate(params *StagesIdentificationUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesIdentificationUpdateOK, error)

	StagesInvitationCreate(params *StagesInvitationCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationCreateCreated, error)

	StagesInvitationDelete(params *StagesInvitationDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationDeleteNoContent, error)

	StagesInvitationInvitationsCreate(params *StagesInvitationInvitationsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationInvitationsCreateCreated, error)

	StagesInvitationInvitationsDelete(params *StagesInvitationInvitationsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationInvitationsDeleteNoContent, error)

	StagesInvitationInvitationsList(params *StagesInvitationInvitationsListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationInvitationsListOK, error)

	StagesInvitationInvitationsPartialUpdate(params *StagesInvitationInvitationsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationInvitationsPartialUpdateOK, error)

	StagesInvitationInvitationsRead(params *StagesInvitationInvitationsReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationInvitationsReadOK, error)

	StagesInvitationInvitationsUpdate(params *StagesInvitationInvitationsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationInvitationsUpdateOK, error)

	StagesInvitationList(params *StagesInvitationListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationListOK, error)

	StagesInvitationPartialUpdate(params *StagesInvitationPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationPartialUpdateOK, error)

	StagesInvitationRead(params *StagesInvitationReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationReadOK, error)

	StagesInvitationUpdate(params *StagesInvitationUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationUpdateOK, error)

	StagesOtpStaticCreate(params *StagesOtpStaticCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpStaticCreateCreated, error)

	StagesOtpStaticDelete(params *StagesOtpStaticDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpStaticDeleteNoContent, error)

	StagesOtpStaticList(params *StagesOtpStaticListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpStaticListOK, error)

	StagesOtpStaticPartialUpdate(params *StagesOtpStaticPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpStaticPartialUpdateOK, error)

	StagesOtpStaticRead(params *StagesOtpStaticReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpStaticReadOK, error)

	StagesOtpStaticUpdate(params *StagesOtpStaticUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpStaticUpdateOK, error)

	StagesOtpTimeCreate(params *StagesOtpTimeCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpTimeCreateCreated, error)

	StagesOtpTimeDelete(params *StagesOtpTimeDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpTimeDeleteNoContent, error)

	StagesOtpTimeList(params *StagesOtpTimeListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpTimeListOK, error)

	StagesOtpTimePartialUpdate(params *StagesOtpTimePartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpTimePartialUpdateOK, error)

	StagesOtpTimeRead(params *StagesOtpTimeReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpTimeReadOK, error)

	StagesOtpTimeUpdate(params *StagesOtpTimeUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpTimeUpdateOK, error)

	StagesOtpValidateCreate(params *StagesOtpValidateCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpValidateCreateCreated, error)

	StagesOtpValidateDelete(params *StagesOtpValidateDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpValidateDeleteNoContent, error)

	StagesOtpValidateList(params *StagesOtpValidateListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpValidateListOK, error)

	StagesOtpValidatePartialUpdate(params *StagesOtpValidatePartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpValidatePartialUpdateOK, error)

	StagesOtpValidateRead(params *StagesOtpValidateReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpValidateReadOK, error)

	StagesOtpValidateUpdate(params *StagesOtpValidateUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpValidateUpdateOK, error)

	StagesPasswordCreate(params *StagesPasswordCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPasswordCreateCreated, error)

	StagesPasswordDelete(params *StagesPasswordDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPasswordDeleteNoContent, error)

	StagesPasswordList(params *StagesPasswordListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPasswordListOK, error)

	StagesPasswordPartialUpdate(params *StagesPasswordPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPasswordPartialUpdateOK, error)

	StagesPasswordRead(params *StagesPasswordReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPasswordReadOK, error)

	StagesPasswordUpdate(params *StagesPasswordUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPasswordUpdateOK, error)

	StagesPromptPromptsCreate(params *StagesPromptPromptsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptPromptsCreateCreated, error)

	StagesPromptPromptsDelete(params *StagesPromptPromptsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptPromptsDeleteNoContent, error)

	StagesPromptPromptsList(params *StagesPromptPromptsListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptPromptsListOK, error)

	StagesPromptPromptsPartialUpdate(params *StagesPromptPromptsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptPromptsPartialUpdateOK, error)

	StagesPromptPromptsRead(params *StagesPromptPromptsReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptPromptsReadOK, error)

	StagesPromptPromptsUpdate(params *StagesPromptPromptsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptPromptsUpdateOK, error)

	StagesPromptStagesCreate(params *StagesPromptStagesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptStagesCreateCreated, error)

	StagesPromptStagesDelete(params *StagesPromptStagesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptStagesDeleteNoContent, error)

	StagesPromptStagesList(params *StagesPromptStagesListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptStagesListOK, error)

	StagesPromptStagesPartialUpdate(params *StagesPromptStagesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptStagesPartialUpdateOK, error)

	StagesPromptStagesRead(params *StagesPromptStagesReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptStagesReadOK, error)

	StagesPromptStagesUpdate(params *StagesPromptStagesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptStagesUpdateOK, error)

	StagesUserDeleteCreate(params *StagesUserDeleteCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserDeleteCreateCreated, error)

	StagesUserDeleteDelete(params *StagesUserDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserDeleteDeleteNoContent, error)

	StagesUserDeleteList(params *StagesUserDeleteListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserDeleteListOK, error)

	StagesUserDeletePartialUpdate(params *StagesUserDeletePartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserDeletePartialUpdateOK, error)

	StagesUserDeleteRead(params *StagesUserDeleteReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserDeleteReadOK, error)

	StagesUserDeleteUpdate(params *StagesUserDeleteUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserDeleteUpdateOK, error)

	StagesUserLoginCreate(params *StagesUserLoginCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLoginCreateCreated, error)

	StagesUserLoginDelete(params *StagesUserLoginDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLoginDeleteNoContent, error)

	StagesUserLoginList(params *StagesUserLoginListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLoginListOK, error)

	StagesUserLoginPartialUpdate(params *StagesUserLoginPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLoginPartialUpdateOK, error)

	StagesUserLoginRead(params *StagesUserLoginReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLoginReadOK, error)

	StagesUserLoginUpdate(params *StagesUserLoginUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLoginUpdateOK, error)

	StagesUserLogoutCreate(params *StagesUserLogoutCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLogoutCreateCreated, error)

	StagesUserLogoutDelete(params *StagesUserLogoutDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLogoutDeleteNoContent, error)

	StagesUserLogoutList(params *StagesUserLogoutListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLogoutListOK, error)

	StagesUserLogoutPartialUpdate(params *StagesUserLogoutPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLogoutPartialUpdateOK, error)

	StagesUserLogoutRead(params *StagesUserLogoutReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLogoutReadOK, error)

	StagesUserLogoutUpdate(params *StagesUserLogoutUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLogoutUpdateOK, error)

	StagesUserWriteCreate(params *StagesUserWriteCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserWriteCreateCreated, error)

	StagesUserWriteDelete(params *StagesUserWriteDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserWriteDeleteNoContent, error)

	StagesUserWriteList(params *StagesUserWriteListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserWriteListOK, error)

	StagesUserWritePartialUpdate(params *StagesUserWritePartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserWritePartialUpdateOK, error)

	StagesUserWriteRead(params *StagesUserWriteReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserWriteReadOK, error)

	StagesUserWriteUpdate(params *StagesUserWriteUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserWriteUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  StagesAllList Stage Viewset
*/
func (a *Client) StagesAllList(params *StagesAllListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesAllListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesAllListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_all_list",
		Method:             "GET",
		PathPattern:        "/stages/all/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesAllListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesAllListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_all_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesAllRead Stage Viewset
*/
func (a *Client) StagesAllRead(params *StagesAllReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesAllReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesAllReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_all_read",
		Method:             "GET",
		PathPattern:        "/stages/all/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesAllReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesAllReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_all_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesCaptchaCreate CaptchaStage Viewset
*/
func (a *Client) StagesCaptchaCreate(params *StagesCaptchaCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesCaptchaCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesCaptchaCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_captcha_create",
		Method:             "POST",
		PathPattern:        "/stages/captcha/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesCaptchaCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesCaptchaCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_captcha_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesCaptchaDelete CaptchaStage Viewset
*/
func (a *Client) StagesCaptchaDelete(params *StagesCaptchaDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesCaptchaDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesCaptchaDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_captcha_delete",
		Method:             "DELETE",
		PathPattern:        "/stages/captcha/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesCaptchaDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesCaptchaDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_captcha_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesCaptchaList CaptchaStage Viewset
*/
func (a *Client) StagesCaptchaList(params *StagesCaptchaListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesCaptchaListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesCaptchaListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_captcha_list",
		Method:             "GET",
		PathPattern:        "/stages/captcha/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesCaptchaListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesCaptchaListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_captcha_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesCaptchaPartialUpdate CaptchaStage Viewset
*/
func (a *Client) StagesCaptchaPartialUpdate(params *StagesCaptchaPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesCaptchaPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesCaptchaPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_captcha_partial_update",
		Method:             "PATCH",
		PathPattern:        "/stages/captcha/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesCaptchaPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesCaptchaPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_captcha_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesCaptchaRead CaptchaStage Viewset
*/
func (a *Client) StagesCaptchaRead(params *StagesCaptchaReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesCaptchaReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesCaptchaReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_captcha_read",
		Method:             "GET",
		PathPattern:        "/stages/captcha/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesCaptchaReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesCaptchaReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_captcha_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesCaptchaUpdate CaptchaStage Viewset
*/
func (a *Client) StagesCaptchaUpdate(params *StagesCaptchaUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesCaptchaUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesCaptchaUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_captcha_update",
		Method:             "PUT",
		PathPattern:        "/stages/captcha/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesCaptchaUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesCaptchaUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_captcha_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesConsentCreate ConsentStage Viewset
*/
func (a *Client) StagesConsentCreate(params *StagesConsentCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesConsentCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesConsentCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_consent_create",
		Method:             "POST",
		PathPattern:        "/stages/consent/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesConsentCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesConsentCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_consent_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesConsentDelete ConsentStage Viewset
*/
func (a *Client) StagesConsentDelete(params *StagesConsentDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesConsentDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesConsentDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_consent_delete",
		Method:             "DELETE",
		PathPattern:        "/stages/consent/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesConsentDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesConsentDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_consent_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesConsentList ConsentStage Viewset
*/
func (a *Client) StagesConsentList(params *StagesConsentListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesConsentListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesConsentListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_consent_list",
		Method:             "GET",
		PathPattern:        "/stages/consent/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesConsentListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesConsentListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_consent_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesConsentPartialUpdate ConsentStage Viewset
*/
func (a *Client) StagesConsentPartialUpdate(params *StagesConsentPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesConsentPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesConsentPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_consent_partial_update",
		Method:             "PATCH",
		PathPattern:        "/stages/consent/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesConsentPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesConsentPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_consent_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesConsentRead ConsentStage Viewset
*/
func (a *Client) StagesConsentRead(params *StagesConsentReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesConsentReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesConsentReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_consent_read",
		Method:             "GET",
		PathPattern:        "/stages/consent/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesConsentReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesConsentReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_consent_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesConsentUpdate ConsentStage Viewset
*/
func (a *Client) StagesConsentUpdate(params *StagesConsentUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesConsentUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesConsentUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_consent_update",
		Method:             "PUT",
		PathPattern:        "/stages/consent/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesConsentUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesConsentUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_consent_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesDummyCreate DummyStage Viewset
*/
func (a *Client) StagesDummyCreate(params *StagesDummyCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesDummyCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesDummyCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_dummy_create",
		Method:             "POST",
		PathPattern:        "/stages/dummy/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesDummyCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesDummyCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_dummy_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesDummyDelete DummyStage Viewset
*/
func (a *Client) StagesDummyDelete(params *StagesDummyDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesDummyDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesDummyDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_dummy_delete",
		Method:             "DELETE",
		PathPattern:        "/stages/dummy/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesDummyDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesDummyDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_dummy_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesDummyList DummyStage Viewset
*/
func (a *Client) StagesDummyList(params *StagesDummyListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesDummyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesDummyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_dummy_list",
		Method:             "GET",
		PathPattern:        "/stages/dummy/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesDummyListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesDummyListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_dummy_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesDummyPartialUpdate DummyStage Viewset
*/
func (a *Client) StagesDummyPartialUpdate(params *StagesDummyPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesDummyPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesDummyPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_dummy_partial_update",
		Method:             "PATCH",
		PathPattern:        "/stages/dummy/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesDummyPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesDummyPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_dummy_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesDummyRead DummyStage Viewset
*/
func (a *Client) StagesDummyRead(params *StagesDummyReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesDummyReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesDummyReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_dummy_read",
		Method:             "GET",
		PathPattern:        "/stages/dummy/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesDummyReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesDummyReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_dummy_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesDummyUpdate DummyStage Viewset
*/
func (a *Client) StagesDummyUpdate(params *StagesDummyUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesDummyUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesDummyUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_dummy_update",
		Method:             "PUT",
		PathPattern:        "/stages/dummy/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesDummyUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesDummyUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_dummy_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesEmailCreate EmailStage Viewset
*/
func (a *Client) StagesEmailCreate(params *StagesEmailCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesEmailCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesEmailCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_email_create",
		Method:             "POST",
		PathPattern:        "/stages/email/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesEmailCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesEmailCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_email_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesEmailDelete EmailStage Viewset
*/
func (a *Client) StagesEmailDelete(params *StagesEmailDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesEmailDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesEmailDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_email_delete",
		Method:             "DELETE",
		PathPattern:        "/stages/email/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesEmailDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesEmailDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_email_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesEmailList EmailStage Viewset
*/
func (a *Client) StagesEmailList(params *StagesEmailListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesEmailListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesEmailListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_email_list",
		Method:             "GET",
		PathPattern:        "/stages/email/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesEmailListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesEmailListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_email_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesEmailPartialUpdate EmailStage Viewset
*/
func (a *Client) StagesEmailPartialUpdate(params *StagesEmailPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesEmailPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesEmailPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_email_partial_update",
		Method:             "PATCH",
		PathPattern:        "/stages/email/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesEmailPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesEmailPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_email_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesEmailRead EmailStage Viewset
*/
func (a *Client) StagesEmailRead(params *StagesEmailReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesEmailReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesEmailReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_email_read",
		Method:             "GET",
		PathPattern:        "/stages/email/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesEmailReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesEmailReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_email_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesEmailUpdate EmailStage Viewset
*/
func (a *Client) StagesEmailUpdate(params *StagesEmailUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesEmailUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesEmailUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_email_update",
		Method:             "PUT",
		PathPattern:        "/stages/email/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesEmailUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesEmailUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_email_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesIdentificationCreate IdentificationStage Viewset
*/
func (a *Client) StagesIdentificationCreate(params *StagesIdentificationCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesIdentificationCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesIdentificationCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_identification_create",
		Method:             "POST",
		PathPattern:        "/stages/identification/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesIdentificationCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesIdentificationCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_identification_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesIdentificationDelete IdentificationStage Viewset
*/
func (a *Client) StagesIdentificationDelete(params *StagesIdentificationDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesIdentificationDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesIdentificationDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_identification_delete",
		Method:             "DELETE",
		PathPattern:        "/stages/identification/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesIdentificationDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesIdentificationDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_identification_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesIdentificationList IdentificationStage Viewset
*/
func (a *Client) StagesIdentificationList(params *StagesIdentificationListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesIdentificationListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesIdentificationListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_identification_list",
		Method:             "GET",
		PathPattern:        "/stages/identification/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesIdentificationListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesIdentificationListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_identification_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesIdentificationPartialUpdate IdentificationStage Viewset
*/
func (a *Client) StagesIdentificationPartialUpdate(params *StagesIdentificationPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesIdentificationPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesIdentificationPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_identification_partial_update",
		Method:             "PATCH",
		PathPattern:        "/stages/identification/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesIdentificationPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesIdentificationPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_identification_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesIdentificationRead IdentificationStage Viewset
*/
func (a *Client) StagesIdentificationRead(params *StagesIdentificationReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesIdentificationReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesIdentificationReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_identification_read",
		Method:             "GET",
		PathPattern:        "/stages/identification/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesIdentificationReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesIdentificationReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_identification_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesIdentificationUpdate IdentificationStage Viewset
*/
func (a *Client) StagesIdentificationUpdate(params *StagesIdentificationUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesIdentificationUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesIdentificationUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_identification_update",
		Method:             "PUT",
		PathPattern:        "/stages/identification/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesIdentificationUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesIdentificationUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_identification_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesInvitationCreate InvitationStage Viewset
*/
func (a *Client) StagesInvitationCreate(params *StagesInvitationCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesInvitationCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_invitation_create",
		Method:             "POST",
		PathPattern:        "/stages/invitation/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesInvitationCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesInvitationCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_invitation_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesInvitationDelete InvitationStage Viewset
*/
func (a *Client) StagesInvitationDelete(params *StagesInvitationDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesInvitationDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_invitation_delete",
		Method:             "DELETE",
		PathPattern:        "/stages/invitation/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesInvitationDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesInvitationDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_invitation_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesInvitationInvitationsCreate Invitation Viewset
*/
func (a *Client) StagesInvitationInvitationsCreate(params *StagesInvitationInvitationsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationInvitationsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesInvitationInvitationsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_invitation_invitations_create",
		Method:             "POST",
		PathPattern:        "/stages/invitation/invitations/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesInvitationInvitationsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesInvitationInvitationsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_invitation_invitations_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesInvitationInvitationsDelete Invitation Viewset
*/
func (a *Client) StagesInvitationInvitationsDelete(params *StagesInvitationInvitationsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationInvitationsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesInvitationInvitationsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_invitation_invitations_delete",
		Method:             "DELETE",
		PathPattern:        "/stages/invitation/invitations/{invite_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesInvitationInvitationsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesInvitationInvitationsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_invitation_invitations_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesInvitationInvitationsList Invitation Viewset
*/
func (a *Client) StagesInvitationInvitationsList(params *StagesInvitationInvitationsListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationInvitationsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesInvitationInvitationsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_invitation_invitations_list",
		Method:             "GET",
		PathPattern:        "/stages/invitation/invitations/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesInvitationInvitationsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesInvitationInvitationsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_invitation_invitations_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesInvitationInvitationsPartialUpdate Invitation Viewset
*/
func (a *Client) StagesInvitationInvitationsPartialUpdate(params *StagesInvitationInvitationsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationInvitationsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesInvitationInvitationsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_invitation_invitations_partial_update",
		Method:             "PATCH",
		PathPattern:        "/stages/invitation/invitations/{invite_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesInvitationInvitationsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesInvitationInvitationsPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_invitation_invitations_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesInvitationInvitationsRead Invitation Viewset
*/
func (a *Client) StagesInvitationInvitationsRead(params *StagesInvitationInvitationsReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationInvitationsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesInvitationInvitationsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_invitation_invitations_read",
		Method:             "GET",
		PathPattern:        "/stages/invitation/invitations/{invite_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesInvitationInvitationsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesInvitationInvitationsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_invitation_invitations_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesInvitationInvitationsUpdate Invitation Viewset
*/
func (a *Client) StagesInvitationInvitationsUpdate(params *StagesInvitationInvitationsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationInvitationsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesInvitationInvitationsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_invitation_invitations_update",
		Method:             "PUT",
		PathPattern:        "/stages/invitation/invitations/{invite_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesInvitationInvitationsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesInvitationInvitationsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_invitation_invitations_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesInvitationList InvitationStage Viewset
*/
func (a *Client) StagesInvitationList(params *StagesInvitationListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesInvitationListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_invitation_list",
		Method:             "GET",
		PathPattern:        "/stages/invitation/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesInvitationListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesInvitationListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_invitation_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesInvitationPartialUpdate InvitationStage Viewset
*/
func (a *Client) StagesInvitationPartialUpdate(params *StagesInvitationPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesInvitationPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_invitation_partial_update",
		Method:             "PATCH",
		PathPattern:        "/stages/invitation/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesInvitationPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesInvitationPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_invitation_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesInvitationRead InvitationStage Viewset
*/
func (a *Client) StagesInvitationRead(params *StagesInvitationReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesInvitationReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_invitation_read",
		Method:             "GET",
		PathPattern:        "/stages/invitation/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesInvitationReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesInvitationReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_invitation_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesInvitationUpdate InvitationStage Viewset
*/
func (a *Client) StagesInvitationUpdate(params *StagesInvitationUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesInvitationUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesInvitationUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_invitation_update",
		Method:             "PUT",
		PathPattern:        "/stages/invitation/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesInvitationUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesInvitationUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_invitation_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesOtpStaticCreate OTPStaticStage Viewset
*/
func (a *Client) StagesOtpStaticCreate(params *StagesOtpStaticCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpStaticCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesOtpStaticCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_otp_static_create",
		Method:             "POST",
		PathPattern:        "/stages/otp_static/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesOtpStaticCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesOtpStaticCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_otp_static_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesOtpStaticDelete OTPStaticStage Viewset
*/
func (a *Client) StagesOtpStaticDelete(params *StagesOtpStaticDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpStaticDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesOtpStaticDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_otp_static_delete",
		Method:             "DELETE",
		PathPattern:        "/stages/otp_static/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesOtpStaticDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesOtpStaticDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_otp_static_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesOtpStaticList OTPStaticStage Viewset
*/
func (a *Client) StagesOtpStaticList(params *StagesOtpStaticListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpStaticListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesOtpStaticListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_otp_static_list",
		Method:             "GET",
		PathPattern:        "/stages/otp_static/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesOtpStaticListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesOtpStaticListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_otp_static_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesOtpStaticPartialUpdate OTPStaticStage Viewset
*/
func (a *Client) StagesOtpStaticPartialUpdate(params *StagesOtpStaticPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpStaticPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesOtpStaticPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_otp_static_partial_update",
		Method:             "PATCH",
		PathPattern:        "/stages/otp_static/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesOtpStaticPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesOtpStaticPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_otp_static_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesOtpStaticRead OTPStaticStage Viewset
*/
func (a *Client) StagesOtpStaticRead(params *StagesOtpStaticReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpStaticReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesOtpStaticReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_otp_static_read",
		Method:             "GET",
		PathPattern:        "/stages/otp_static/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesOtpStaticReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesOtpStaticReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_otp_static_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesOtpStaticUpdate OTPStaticStage Viewset
*/
func (a *Client) StagesOtpStaticUpdate(params *StagesOtpStaticUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpStaticUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesOtpStaticUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_otp_static_update",
		Method:             "PUT",
		PathPattern:        "/stages/otp_static/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesOtpStaticUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesOtpStaticUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_otp_static_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesOtpTimeCreate OTPTimeStage Viewset
*/
func (a *Client) StagesOtpTimeCreate(params *StagesOtpTimeCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpTimeCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesOtpTimeCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_otp_time_create",
		Method:             "POST",
		PathPattern:        "/stages/otp_time/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesOtpTimeCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesOtpTimeCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_otp_time_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesOtpTimeDelete OTPTimeStage Viewset
*/
func (a *Client) StagesOtpTimeDelete(params *StagesOtpTimeDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpTimeDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesOtpTimeDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_otp_time_delete",
		Method:             "DELETE",
		PathPattern:        "/stages/otp_time/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesOtpTimeDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesOtpTimeDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_otp_time_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesOtpTimeList OTPTimeStage Viewset
*/
func (a *Client) StagesOtpTimeList(params *StagesOtpTimeListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpTimeListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesOtpTimeListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_otp_time_list",
		Method:             "GET",
		PathPattern:        "/stages/otp_time/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesOtpTimeListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesOtpTimeListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_otp_time_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesOtpTimePartialUpdate OTPTimeStage Viewset
*/
func (a *Client) StagesOtpTimePartialUpdate(params *StagesOtpTimePartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpTimePartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesOtpTimePartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_otp_time_partial_update",
		Method:             "PATCH",
		PathPattern:        "/stages/otp_time/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesOtpTimePartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesOtpTimePartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_otp_time_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesOtpTimeRead OTPTimeStage Viewset
*/
func (a *Client) StagesOtpTimeRead(params *StagesOtpTimeReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpTimeReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesOtpTimeReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_otp_time_read",
		Method:             "GET",
		PathPattern:        "/stages/otp_time/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesOtpTimeReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesOtpTimeReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_otp_time_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesOtpTimeUpdate OTPTimeStage Viewset
*/
func (a *Client) StagesOtpTimeUpdate(params *StagesOtpTimeUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpTimeUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesOtpTimeUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_otp_time_update",
		Method:             "PUT",
		PathPattern:        "/stages/otp_time/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesOtpTimeUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesOtpTimeUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_otp_time_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesOtpValidateCreate OTPValidateStage Viewset
*/
func (a *Client) StagesOtpValidateCreate(params *StagesOtpValidateCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpValidateCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesOtpValidateCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_otp_validate_create",
		Method:             "POST",
		PathPattern:        "/stages/otp_validate/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesOtpValidateCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesOtpValidateCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_otp_validate_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesOtpValidateDelete OTPValidateStage Viewset
*/
func (a *Client) StagesOtpValidateDelete(params *StagesOtpValidateDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpValidateDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesOtpValidateDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_otp_validate_delete",
		Method:             "DELETE",
		PathPattern:        "/stages/otp_validate/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesOtpValidateDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesOtpValidateDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_otp_validate_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesOtpValidateList OTPValidateStage Viewset
*/
func (a *Client) StagesOtpValidateList(params *StagesOtpValidateListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpValidateListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesOtpValidateListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_otp_validate_list",
		Method:             "GET",
		PathPattern:        "/stages/otp_validate/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesOtpValidateListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesOtpValidateListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_otp_validate_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesOtpValidatePartialUpdate OTPValidateStage Viewset
*/
func (a *Client) StagesOtpValidatePartialUpdate(params *StagesOtpValidatePartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpValidatePartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesOtpValidatePartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_otp_validate_partial_update",
		Method:             "PATCH",
		PathPattern:        "/stages/otp_validate/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesOtpValidatePartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesOtpValidatePartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_otp_validate_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesOtpValidateRead OTPValidateStage Viewset
*/
func (a *Client) StagesOtpValidateRead(params *StagesOtpValidateReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpValidateReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesOtpValidateReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_otp_validate_read",
		Method:             "GET",
		PathPattern:        "/stages/otp_validate/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesOtpValidateReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesOtpValidateReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_otp_validate_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesOtpValidateUpdate OTPValidateStage Viewset
*/
func (a *Client) StagesOtpValidateUpdate(params *StagesOtpValidateUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesOtpValidateUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesOtpValidateUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_otp_validate_update",
		Method:             "PUT",
		PathPattern:        "/stages/otp_validate/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesOtpValidateUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesOtpValidateUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_otp_validate_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesPasswordCreate PasswordStage Viewset
*/
func (a *Client) StagesPasswordCreate(params *StagesPasswordCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPasswordCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesPasswordCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_password_create",
		Method:             "POST",
		PathPattern:        "/stages/password/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesPasswordCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesPasswordCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_password_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesPasswordDelete PasswordStage Viewset
*/
func (a *Client) StagesPasswordDelete(params *StagesPasswordDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPasswordDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesPasswordDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_password_delete",
		Method:             "DELETE",
		PathPattern:        "/stages/password/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesPasswordDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesPasswordDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_password_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesPasswordList PasswordStage Viewset
*/
func (a *Client) StagesPasswordList(params *StagesPasswordListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPasswordListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesPasswordListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_password_list",
		Method:             "GET",
		PathPattern:        "/stages/password/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesPasswordListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesPasswordListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_password_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesPasswordPartialUpdate PasswordStage Viewset
*/
func (a *Client) StagesPasswordPartialUpdate(params *StagesPasswordPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPasswordPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesPasswordPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_password_partial_update",
		Method:             "PATCH",
		PathPattern:        "/stages/password/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesPasswordPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesPasswordPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_password_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesPasswordRead PasswordStage Viewset
*/
func (a *Client) StagesPasswordRead(params *StagesPasswordReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPasswordReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesPasswordReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_password_read",
		Method:             "GET",
		PathPattern:        "/stages/password/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesPasswordReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesPasswordReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_password_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesPasswordUpdate PasswordStage Viewset
*/
func (a *Client) StagesPasswordUpdate(params *StagesPasswordUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPasswordUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesPasswordUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_password_update",
		Method:             "PUT",
		PathPattern:        "/stages/password/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesPasswordUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesPasswordUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_password_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesPromptPromptsCreate Prompt Viewset
*/
func (a *Client) StagesPromptPromptsCreate(params *StagesPromptPromptsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptPromptsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesPromptPromptsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_prompt_prompts_create",
		Method:             "POST",
		PathPattern:        "/stages/prompt/prompts/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesPromptPromptsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesPromptPromptsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_prompt_prompts_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesPromptPromptsDelete Prompt Viewset
*/
func (a *Client) StagesPromptPromptsDelete(params *StagesPromptPromptsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptPromptsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesPromptPromptsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_prompt_prompts_delete",
		Method:             "DELETE",
		PathPattern:        "/stages/prompt/prompts/{prompt_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesPromptPromptsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesPromptPromptsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_prompt_prompts_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesPromptPromptsList Prompt Viewset
*/
func (a *Client) StagesPromptPromptsList(params *StagesPromptPromptsListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptPromptsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesPromptPromptsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_prompt_prompts_list",
		Method:             "GET",
		PathPattern:        "/stages/prompt/prompts/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesPromptPromptsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesPromptPromptsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_prompt_prompts_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesPromptPromptsPartialUpdate Prompt Viewset
*/
func (a *Client) StagesPromptPromptsPartialUpdate(params *StagesPromptPromptsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptPromptsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesPromptPromptsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_prompt_prompts_partial_update",
		Method:             "PATCH",
		PathPattern:        "/stages/prompt/prompts/{prompt_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesPromptPromptsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesPromptPromptsPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_prompt_prompts_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesPromptPromptsRead Prompt Viewset
*/
func (a *Client) StagesPromptPromptsRead(params *StagesPromptPromptsReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptPromptsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesPromptPromptsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_prompt_prompts_read",
		Method:             "GET",
		PathPattern:        "/stages/prompt/prompts/{prompt_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesPromptPromptsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesPromptPromptsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_prompt_prompts_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesPromptPromptsUpdate Prompt Viewset
*/
func (a *Client) StagesPromptPromptsUpdate(params *StagesPromptPromptsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptPromptsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesPromptPromptsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_prompt_prompts_update",
		Method:             "PUT",
		PathPattern:        "/stages/prompt/prompts/{prompt_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesPromptPromptsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesPromptPromptsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_prompt_prompts_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesPromptStagesCreate PromptStage Viewset
*/
func (a *Client) StagesPromptStagesCreate(params *StagesPromptStagesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptStagesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesPromptStagesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_prompt_stages_create",
		Method:             "POST",
		PathPattern:        "/stages/prompt/stages/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesPromptStagesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesPromptStagesCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_prompt_stages_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesPromptStagesDelete PromptStage Viewset
*/
func (a *Client) StagesPromptStagesDelete(params *StagesPromptStagesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptStagesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesPromptStagesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_prompt_stages_delete",
		Method:             "DELETE",
		PathPattern:        "/stages/prompt/stages/{pbm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesPromptStagesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesPromptStagesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_prompt_stages_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesPromptStagesList PromptStage Viewset
*/
func (a *Client) StagesPromptStagesList(params *StagesPromptStagesListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptStagesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesPromptStagesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_prompt_stages_list",
		Method:             "GET",
		PathPattern:        "/stages/prompt/stages/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesPromptStagesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesPromptStagesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_prompt_stages_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesPromptStagesPartialUpdate PromptStage Viewset
*/
func (a *Client) StagesPromptStagesPartialUpdate(params *StagesPromptStagesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptStagesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesPromptStagesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_prompt_stages_partial_update",
		Method:             "PATCH",
		PathPattern:        "/stages/prompt/stages/{pbm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesPromptStagesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesPromptStagesPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_prompt_stages_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesPromptStagesRead PromptStage Viewset
*/
func (a *Client) StagesPromptStagesRead(params *StagesPromptStagesReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptStagesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesPromptStagesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_prompt_stages_read",
		Method:             "GET",
		PathPattern:        "/stages/prompt/stages/{pbm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesPromptStagesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesPromptStagesReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_prompt_stages_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesPromptStagesUpdate PromptStage Viewset
*/
func (a *Client) StagesPromptStagesUpdate(params *StagesPromptStagesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesPromptStagesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesPromptStagesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_prompt_stages_update",
		Method:             "PUT",
		PathPattern:        "/stages/prompt/stages/{pbm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesPromptStagesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesPromptStagesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_prompt_stages_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserDeleteCreate UserDeleteStage Viewset
*/
func (a *Client) StagesUserDeleteCreate(params *StagesUserDeleteCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserDeleteCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserDeleteCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_delete_create",
		Method:             "POST",
		PathPattern:        "/stages/user_delete/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserDeleteCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserDeleteCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_delete_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserDeleteDelete UserDeleteStage Viewset
*/
func (a *Client) StagesUserDeleteDelete(params *StagesUserDeleteDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserDeleteDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserDeleteDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_delete_delete",
		Method:             "DELETE",
		PathPattern:        "/stages/user_delete/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserDeleteDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserDeleteDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_delete_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserDeleteList UserDeleteStage Viewset
*/
func (a *Client) StagesUserDeleteList(params *StagesUserDeleteListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserDeleteListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserDeleteListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_delete_list",
		Method:             "GET",
		PathPattern:        "/stages/user_delete/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserDeleteListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserDeleteListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_delete_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserDeletePartialUpdate UserDeleteStage Viewset
*/
func (a *Client) StagesUserDeletePartialUpdate(params *StagesUserDeletePartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserDeletePartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserDeletePartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_delete_partial_update",
		Method:             "PATCH",
		PathPattern:        "/stages/user_delete/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserDeletePartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserDeletePartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_delete_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserDeleteRead UserDeleteStage Viewset
*/
func (a *Client) StagesUserDeleteRead(params *StagesUserDeleteReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserDeleteReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserDeleteReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_delete_read",
		Method:             "GET",
		PathPattern:        "/stages/user_delete/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserDeleteReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserDeleteReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_delete_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserDeleteUpdate UserDeleteStage Viewset
*/
func (a *Client) StagesUserDeleteUpdate(params *StagesUserDeleteUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserDeleteUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserDeleteUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_delete_update",
		Method:             "PUT",
		PathPattern:        "/stages/user_delete/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserDeleteUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserDeleteUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_delete_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserLoginCreate UserLoginStage Viewset
*/
func (a *Client) StagesUserLoginCreate(params *StagesUserLoginCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLoginCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserLoginCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_login_create",
		Method:             "POST",
		PathPattern:        "/stages/user_login/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserLoginCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserLoginCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_login_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserLoginDelete UserLoginStage Viewset
*/
func (a *Client) StagesUserLoginDelete(params *StagesUserLoginDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLoginDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserLoginDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_login_delete",
		Method:             "DELETE",
		PathPattern:        "/stages/user_login/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserLoginDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserLoginDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_login_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserLoginList UserLoginStage Viewset
*/
func (a *Client) StagesUserLoginList(params *StagesUserLoginListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLoginListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserLoginListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_login_list",
		Method:             "GET",
		PathPattern:        "/stages/user_login/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserLoginListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserLoginListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_login_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserLoginPartialUpdate UserLoginStage Viewset
*/
func (a *Client) StagesUserLoginPartialUpdate(params *StagesUserLoginPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLoginPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserLoginPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_login_partial_update",
		Method:             "PATCH",
		PathPattern:        "/stages/user_login/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserLoginPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserLoginPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_login_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserLoginRead UserLoginStage Viewset
*/
func (a *Client) StagesUserLoginRead(params *StagesUserLoginReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLoginReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserLoginReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_login_read",
		Method:             "GET",
		PathPattern:        "/stages/user_login/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserLoginReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserLoginReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_login_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserLoginUpdate UserLoginStage Viewset
*/
func (a *Client) StagesUserLoginUpdate(params *StagesUserLoginUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLoginUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserLoginUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_login_update",
		Method:             "PUT",
		PathPattern:        "/stages/user_login/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserLoginUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserLoginUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_login_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserLogoutCreate UserLogoutStage Viewset
*/
func (a *Client) StagesUserLogoutCreate(params *StagesUserLogoutCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLogoutCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserLogoutCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_logout_create",
		Method:             "POST",
		PathPattern:        "/stages/user_logout/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserLogoutCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserLogoutCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_logout_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserLogoutDelete UserLogoutStage Viewset
*/
func (a *Client) StagesUserLogoutDelete(params *StagesUserLogoutDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLogoutDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserLogoutDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_logout_delete",
		Method:             "DELETE",
		PathPattern:        "/stages/user_logout/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserLogoutDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserLogoutDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_logout_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserLogoutList UserLogoutStage Viewset
*/
func (a *Client) StagesUserLogoutList(params *StagesUserLogoutListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLogoutListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserLogoutListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_logout_list",
		Method:             "GET",
		PathPattern:        "/stages/user_logout/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserLogoutListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserLogoutListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_logout_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserLogoutPartialUpdate UserLogoutStage Viewset
*/
func (a *Client) StagesUserLogoutPartialUpdate(params *StagesUserLogoutPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLogoutPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserLogoutPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_logout_partial_update",
		Method:             "PATCH",
		PathPattern:        "/stages/user_logout/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserLogoutPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserLogoutPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_logout_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserLogoutRead UserLogoutStage Viewset
*/
func (a *Client) StagesUserLogoutRead(params *StagesUserLogoutReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLogoutReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserLogoutReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_logout_read",
		Method:             "GET",
		PathPattern:        "/stages/user_logout/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserLogoutReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserLogoutReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_logout_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserLogoutUpdate UserLogoutStage Viewset
*/
func (a *Client) StagesUserLogoutUpdate(params *StagesUserLogoutUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserLogoutUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserLogoutUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_logout_update",
		Method:             "PUT",
		PathPattern:        "/stages/user_logout/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserLogoutUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserLogoutUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_logout_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserWriteCreate UserWriteStage Viewset
*/
func (a *Client) StagesUserWriteCreate(params *StagesUserWriteCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserWriteCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserWriteCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_write_create",
		Method:             "POST",
		PathPattern:        "/stages/user_write/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserWriteCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserWriteCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_write_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserWriteDelete UserWriteStage Viewset
*/
func (a *Client) StagesUserWriteDelete(params *StagesUserWriteDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserWriteDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserWriteDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_write_delete",
		Method:             "DELETE",
		PathPattern:        "/stages/user_write/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserWriteDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserWriteDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_write_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserWriteList UserWriteStage Viewset
*/
func (a *Client) StagesUserWriteList(params *StagesUserWriteListParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserWriteListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserWriteListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_write_list",
		Method:             "GET",
		PathPattern:        "/stages/user_write/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserWriteListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserWriteListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_write_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserWritePartialUpdate UserWriteStage Viewset
*/
func (a *Client) StagesUserWritePartialUpdate(params *StagesUserWritePartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserWritePartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserWritePartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_write_partial_update",
		Method:             "PATCH",
		PathPattern:        "/stages/user_write/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserWritePartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserWritePartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_write_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserWriteRead UserWriteStage Viewset
*/
func (a *Client) StagesUserWriteRead(params *StagesUserWriteReadParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserWriteReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserWriteReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_write_read",
		Method:             "GET",
		PathPattern:        "/stages/user_write/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserWriteReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserWriteReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_write_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StagesUserWriteUpdate UserWriteStage Viewset
*/
func (a *Client) StagesUserWriteUpdate(params *StagesUserWriteUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StagesUserWriteUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStagesUserWriteUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stages_user_write_update",
		Method:             "PUT",
		PathPattern:        "/stages/user_write/{stage_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StagesUserWriteUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StagesUserWriteUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stages_user_write_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
