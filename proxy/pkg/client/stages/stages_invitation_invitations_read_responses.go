// Code generated by go-swagger; DO NOT EDIT.

package stages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/BeryJu/passbook/proxy/pkg/models"
)

// StagesInvitationInvitationsReadReader is a Reader for the StagesInvitationInvitationsRead structure.
type StagesInvitationInvitationsReadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StagesInvitationInvitationsReadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStagesInvitationInvitationsReadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewStagesInvitationInvitationsReadOK creates a StagesInvitationInvitationsReadOK with default headers values
func NewStagesInvitationInvitationsReadOK() *StagesInvitationInvitationsReadOK {
	return &StagesInvitationInvitationsReadOK{}
}

/*StagesInvitationInvitationsReadOK handles this case with default header values.

StagesInvitationInvitationsReadOK stages invitation invitations read o k
*/
type StagesInvitationInvitationsReadOK struct {
	Payload *models.Invitation
}

func (o *StagesInvitationInvitationsReadOK) Error() string {
	return fmt.Sprintf("[GET /stages/invitation/invitations/{invite_uuid}/][%d] stagesInvitationInvitationsReadOK  %+v", 200, o.Payload)
}

func (o *StagesInvitationInvitationsReadOK) GetPayload() *models.Invitation {
	return o.Payload
}

func (o *StagesInvitationInvitationsReadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Invitation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
