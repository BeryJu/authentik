// Code generated by go-swagger; DO NOT EDIT.

package sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new sources API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sources API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	SourcesAllList(params *SourcesAllListParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesAllListOK, error)

	SourcesAllRead(params *SourcesAllReadParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesAllReadOK, error)

	SourcesLdapCreate(params *SourcesLdapCreateParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesLdapCreateCreated, error)

	SourcesLdapDelete(params *SourcesLdapDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesLdapDeleteNoContent, error)

	SourcesLdapList(params *SourcesLdapListParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesLdapListOK, error)

	SourcesLdapPartialUpdate(params *SourcesLdapPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesLdapPartialUpdateOK, error)

	SourcesLdapRead(params *SourcesLdapReadParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesLdapReadOK, error)

	SourcesLdapUpdate(params *SourcesLdapUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesLdapUpdateOK, error)

	SourcesOauthCreate(params *SourcesOauthCreateParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesOauthCreateCreated, error)

	SourcesOauthDelete(params *SourcesOauthDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesOauthDeleteNoContent, error)

	SourcesOauthList(params *SourcesOauthListParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesOauthListOK, error)

	SourcesOauthPartialUpdate(params *SourcesOauthPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesOauthPartialUpdateOK, error)

	SourcesOauthRead(params *SourcesOauthReadParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesOauthReadOK, error)

	SourcesOauthUpdate(params *SourcesOauthUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesOauthUpdateOK, error)

	SourcesSamlCreate(params *SourcesSamlCreateParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesSamlCreateCreated, error)

	SourcesSamlDelete(params *SourcesSamlDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesSamlDeleteNoContent, error)

	SourcesSamlList(params *SourcesSamlListParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesSamlListOK, error)

	SourcesSamlPartialUpdate(params *SourcesSamlPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesSamlPartialUpdateOK, error)

	SourcesSamlRead(params *SourcesSamlReadParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesSamlReadOK, error)

	SourcesSamlUpdate(params *SourcesSamlUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesSamlUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SourcesAllList Source Viewset
*/
func (a *Client) SourcesAllList(params *SourcesAllListParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesAllListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesAllListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sources_all_list",
		Method:             "GET",
		PathPattern:        "/sources/all/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SourcesAllListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesAllListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sources_all_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SourcesAllRead Source Viewset
*/
func (a *Client) SourcesAllRead(params *SourcesAllReadParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesAllReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesAllReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sources_all_read",
		Method:             "GET",
		PathPattern:        "/sources/all/{pbm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SourcesAllReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesAllReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sources_all_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SourcesLdapCreate LDAP Source Viewset
*/
func (a *Client) SourcesLdapCreate(params *SourcesLdapCreateParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesLdapCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesLdapCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sources_ldap_create",
		Method:             "POST",
		PathPattern:        "/sources/ldap/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SourcesLdapCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesLdapCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sources_ldap_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SourcesLdapDelete LDAP Source Viewset
*/
func (a *Client) SourcesLdapDelete(params *SourcesLdapDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesLdapDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesLdapDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sources_ldap_delete",
		Method:             "DELETE",
		PathPattern:        "/sources/ldap/{pbm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SourcesLdapDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesLdapDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sources_ldap_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SourcesLdapList LDAP Source Viewset
*/
func (a *Client) SourcesLdapList(params *SourcesLdapListParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesLdapListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesLdapListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sources_ldap_list",
		Method:             "GET",
		PathPattern:        "/sources/ldap/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SourcesLdapListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesLdapListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sources_ldap_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SourcesLdapPartialUpdate LDAP Source Viewset
*/
func (a *Client) SourcesLdapPartialUpdate(params *SourcesLdapPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesLdapPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesLdapPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sources_ldap_partial_update",
		Method:             "PATCH",
		PathPattern:        "/sources/ldap/{pbm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SourcesLdapPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesLdapPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sources_ldap_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SourcesLdapRead LDAP Source Viewset
*/
func (a *Client) SourcesLdapRead(params *SourcesLdapReadParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesLdapReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesLdapReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sources_ldap_read",
		Method:             "GET",
		PathPattern:        "/sources/ldap/{pbm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SourcesLdapReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesLdapReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sources_ldap_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SourcesLdapUpdate LDAP Source Viewset
*/
func (a *Client) SourcesLdapUpdate(params *SourcesLdapUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesLdapUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesLdapUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sources_ldap_update",
		Method:             "PUT",
		PathPattern:        "/sources/ldap/{pbm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SourcesLdapUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesLdapUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sources_ldap_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SourcesOauthCreate Source Viewset
*/
func (a *Client) SourcesOauthCreate(params *SourcesOauthCreateParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesOauthCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesOauthCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sources_oauth_create",
		Method:             "POST",
		PathPattern:        "/sources/oauth/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SourcesOauthCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesOauthCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sources_oauth_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SourcesOauthDelete Source Viewset
*/
func (a *Client) SourcesOauthDelete(params *SourcesOauthDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesOauthDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesOauthDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sources_oauth_delete",
		Method:             "DELETE",
		PathPattern:        "/sources/oauth/{pbm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SourcesOauthDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesOauthDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sources_oauth_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SourcesOauthList Source Viewset
*/
func (a *Client) SourcesOauthList(params *SourcesOauthListParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesOauthListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesOauthListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sources_oauth_list",
		Method:             "GET",
		PathPattern:        "/sources/oauth/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SourcesOauthListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesOauthListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sources_oauth_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SourcesOauthPartialUpdate Source Viewset
*/
func (a *Client) SourcesOauthPartialUpdate(params *SourcesOauthPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesOauthPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesOauthPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sources_oauth_partial_update",
		Method:             "PATCH",
		PathPattern:        "/sources/oauth/{pbm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SourcesOauthPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesOauthPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sources_oauth_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SourcesOauthRead Source Viewset
*/
func (a *Client) SourcesOauthRead(params *SourcesOauthReadParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesOauthReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesOauthReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sources_oauth_read",
		Method:             "GET",
		PathPattern:        "/sources/oauth/{pbm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SourcesOauthReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesOauthReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sources_oauth_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SourcesOauthUpdate Source Viewset
*/
func (a *Client) SourcesOauthUpdate(params *SourcesOauthUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesOauthUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesOauthUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sources_oauth_update",
		Method:             "PUT",
		PathPattern:        "/sources/oauth/{pbm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SourcesOauthUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesOauthUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sources_oauth_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SourcesSamlCreate SAMLSource Viewset
*/
func (a *Client) SourcesSamlCreate(params *SourcesSamlCreateParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesSamlCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesSamlCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sources_saml_create",
		Method:             "POST",
		PathPattern:        "/sources/saml/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SourcesSamlCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesSamlCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sources_saml_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SourcesSamlDelete SAMLSource Viewset
*/
func (a *Client) SourcesSamlDelete(params *SourcesSamlDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesSamlDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesSamlDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sources_saml_delete",
		Method:             "DELETE",
		PathPattern:        "/sources/saml/{pbm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SourcesSamlDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesSamlDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sources_saml_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SourcesSamlList SAMLSource Viewset
*/
func (a *Client) SourcesSamlList(params *SourcesSamlListParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesSamlListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesSamlListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sources_saml_list",
		Method:             "GET",
		PathPattern:        "/sources/saml/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SourcesSamlListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesSamlListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sources_saml_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SourcesSamlPartialUpdate SAMLSource Viewset
*/
func (a *Client) SourcesSamlPartialUpdate(params *SourcesSamlPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesSamlPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesSamlPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sources_saml_partial_update",
		Method:             "PATCH",
		PathPattern:        "/sources/saml/{pbm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SourcesSamlPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesSamlPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sources_saml_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SourcesSamlRead SAMLSource Viewset
*/
func (a *Client) SourcesSamlRead(params *SourcesSamlReadParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesSamlReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesSamlReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sources_saml_read",
		Method:             "GET",
		PathPattern:        "/sources/saml/{pbm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SourcesSamlReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesSamlReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sources_saml_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SourcesSamlUpdate SAMLSource Viewset
*/
func (a *Client) SourcesSamlUpdate(params *SourcesSamlUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*SourcesSamlUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourcesSamlUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sources_saml_update",
		Method:             "PUT",
		PathPattern:        "/sources/saml/{pbm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SourcesSamlUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourcesSamlUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sources_saml_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
