// Code generated by go-swagger; DO NOT EDIT.

package outposts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new outposts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for outposts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	OutpostsOutpostsCreate(params *OutpostsOutpostsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsOutpostsCreateCreated, error)

	OutpostsOutpostsDelete(params *OutpostsOutpostsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsOutpostsDeleteNoContent, error)

	OutpostsOutpostsList(params *OutpostsOutpostsListParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsOutpostsListOK, error)

	OutpostsOutpostsPartialUpdate(params *OutpostsOutpostsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsOutpostsPartialUpdateOK, error)

	OutpostsOutpostsRead(params *OutpostsOutpostsReadParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsOutpostsReadOK, error)

	OutpostsOutpostsUpdate(params *OutpostsOutpostsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsOutpostsUpdateOK, error)

	OutpostsProxyCreate(params *OutpostsProxyCreateParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsProxyCreateCreated, error)

	OutpostsProxyDelete(params *OutpostsProxyDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsProxyDeleteNoContent, error)

	OutpostsProxyList(params *OutpostsProxyListParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsProxyListOK, error)

	OutpostsProxyPartialUpdate(params *OutpostsProxyPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsProxyPartialUpdateOK, error)

	OutpostsProxyRead(params *OutpostsProxyReadParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsProxyReadOK, error)

	OutpostsProxyUpdate(params *OutpostsProxyUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsProxyUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  OutpostsOutpostsCreate Outpost Viewset
*/
func (a *Client) OutpostsOutpostsCreate(params *OutpostsOutpostsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsOutpostsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOutpostsOutpostsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "outposts_outposts_create",
		Method:             "POST",
		PathPattern:        "/outposts/outposts/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OutpostsOutpostsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OutpostsOutpostsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for outposts_outposts_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OutpostsOutpostsDelete Outpost Viewset
*/
func (a *Client) OutpostsOutpostsDelete(params *OutpostsOutpostsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsOutpostsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOutpostsOutpostsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "outposts_outposts_delete",
		Method:             "DELETE",
		PathPattern:        "/outposts/outposts/{uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OutpostsOutpostsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OutpostsOutpostsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for outposts_outposts_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OutpostsOutpostsList Outpost Viewset
*/
func (a *Client) OutpostsOutpostsList(params *OutpostsOutpostsListParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsOutpostsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOutpostsOutpostsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "outposts_outposts_list",
		Method:             "GET",
		PathPattern:        "/outposts/outposts/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OutpostsOutpostsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OutpostsOutpostsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for outposts_outposts_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OutpostsOutpostsPartialUpdate Outpost Viewset
*/
func (a *Client) OutpostsOutpostsPartialUpdate(params *OutpostsOutpostsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsOutpostsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOutpostsOutpostsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "outposts_outposts_partial_update",
		Method:             "PATCH",
		PathPattern:        "/outposts/outposts/{uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OutpostsOutpostsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OutpostsOutpostsPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for outposts_outposts_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OutpostsOutpostsRead Outpost Viewset
*/
func (a *Client) OutpostsOutpostsRead(params *OutpostsOutpostsReadParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsOutpostsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOutpostsOutpostsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "outposts_outposts_read",
		Method:             "GET",
		PathPattern:        "/outposts/outposts/{uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OutpostsOutpostsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OutpostsOutpostsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for outposts_outposts_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OutpostsOutpostsUpdate Outpost Viewset
*/
func (a *Client) OutpostsOutpostsUpdate(params *OutpostsOutpostsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsOutpostsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOutpostsOutpostsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "outposts_outposts_update",
		Method:             "PUT",
		PathPattern:        "/outposts/outposts/{uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OutpostsOutpostsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OutpostsOutpostsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for outposts_outposts_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OutpostsProxyCreate ProxyProvider Viewset
*/
func (a *Client) OutpostsProxyCreate(params *OutpostsProxyCreateParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsProxyCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOutpostsProxyCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "outposts_proxy_create",
		Method:             "POST",
		PathPattern:        "/outposts/proxy/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OutpostsProxyCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OutpostsProxyCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for outposts_proxy_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OutpostsProxyDelete ProxyProvider Viewset
*/
func (a *Client) OutpostsProxyDelete(params *OutpostsProxyDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsProxyDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOutpostsProxyDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "outposts_proxy_delete",
		Method:             "DELETE",
		PathPattern:        "/outposts/proxy/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OutpostsProxyDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OutpostsProxyDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for outposts_proxy_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OutpostsProxyList ProxyProvider Viewset
*/
func (a *Client) OutpostsProxyList(params *OutpostsProxyListParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsProxyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOutpostsProxyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "outposts_proxy_list",
		Method:             "GET",
		PathPattern:        "/outposts/proxy/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OutpostsProxyListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OutpostsProxyListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for outposts_proxy_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OutpostsProxyPartialUpdate ProxyProvider Viewset
*/
func (a *Client) OutpostsProxyPartialUpdate(params *OutpostsProxyPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsProxyPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOutpostsProxyPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "outposts_proxy_partial_update",
		Method:             "PATCH",
		PathPattern:        "/outposts/proxy/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OutpostsProxyPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OutpostsProxyPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for outposts_proxy_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OutpostsProxyRead ProxyProvider Viewset
*/
func (a *Client) OutpostsProxyRead(params *OutpostsProxyReadParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsProxyReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOutpostsProxyReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "outposts_proxy_read",
		Method:             "GET",
		PathPattern:        "/outposts/proxy/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OutpostsProxyReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OutpostsProxyReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for outposts_proxy_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OutpostsProxyUpdate ProxyProvider Viewset
*/
func (a *Client) OutpostsProxyUpdate(params *OutpostsProxyUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*OutpostsProxyUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOutpostsProxyUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "outposts_proxy_update",
		Method:             "PUT",
		PathPattern:        "/outposts/proxy/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OutpostsProxyUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OutpostsProxyUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for outposts_proxy_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
