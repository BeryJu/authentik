// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/BeryJu/passbook/proxy/pkg/models"
)

// PoliciesHaveibeenpwnedCreateReader is a Reader for the PoliciesHaveibeenpwnedCreate structure.
type PoliciesHaveibeenpwnedCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PoliciesHaveibeenpwnedCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPoliciesHaveibeenpwnedCreateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPoliciesHaveibeenpwnedCreateCreated creates a PoliciesHaveibeenpwnedCreateCreated with default headers values
func NewPoliciesHaveibeenpwnedCreateCreated() *PoliciesHaveibeenpwnedCreateCreated {
	return &PoliciesHaveibeenpwnedCreateCreated{}
}

/*PoliciesHaveibeenpwnedCreateCreated handles this case with default header values.

PoliciesHaveibeenpwnedCreateCreated policies haveibeenpwned create created
*/
type PoliciesHaveibeenpwnedCreateCreated struct {
	Payload *models.HaveIBeenPwendPolicy
}

func (o *PoliciesHaveibeenpwnedCreateCreated) Error() string {
	return fmt.Sprintf("[POST /policies/haveibeenpwned/][%d] policiesHaveibeenpwnedCreateCreated  %+v", 201, o.Payload)
}

func (o *PoliciesHaveibeenpwnedCreateCreated) GetPayload() *models.HaveIBeenPwendPolicy {
	return o.Payload
}

func (o *PoliciesHaveibeenpwnedCreateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HaveIBeenPwendPolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
