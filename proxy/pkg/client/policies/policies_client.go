// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new policies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for policies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	PoliciesAllList(params *PoliciesAllListParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesAllListOK, error)

	PoliciesAllRead(params *PoliciesAllReadParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesAllReadOK, error)

	PoliciesBindingsCreate(params *PoliciesBindingsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesBindingsCreateCreated, error)

	PoliciesBindingsDelete(params *PoliciesBindingsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesBindingsDeleteNoContent, error)

	PoliciesBindingsList(params *PoliciesBindingsListParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesBindingsListOK, error)

	PoliciesBindingsPartialUpdate(params *PoliciesBindingsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesBindingsPartialUpdateOK, error)

	PoliciesBindingsRead(params *PoliciesBindingsReadParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesBindingsReadOK, error)

	PoliciesBindingsUpdate(params *PoliciesBindingsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesBindingsUpdateOK, error)

	PoliciesDummyCreate(params *PoliciesDummyCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesDummyCreateCreated, error)

	PoliciesDummyDelete(params *PoliciesDummyDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesDummyDeleteNoContent, error)

	PoliciesDummyList(params *PoliciesDummyListParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesDummyListOK, error)

	PoliciesDummyPartialUpdate(params *PoliciesDummyPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesDummyPartialUpdateOK, error)

	PoliciesDummyRead(params *PoliciesDummyReadParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesDummyReadOK, error)

	PoliciesDummyUpdate(params *PoliciesDummyUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesDummyUpdateOK, error)

	PoliciesExpressionCreate(params *PoliciesExpressionCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesExpressionCreateCreated, error)

	PoliciesExpressionDelete(params *PoliciesExpressionDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesExpressionDeleteNoContent, error)

	PoliciesExpressionList(params *PoliciesExpressionListParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesExpressionListOK, error)

	PoliciesExpressionPartialUpdate(params *PoliciesExpressionPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesExpressionPartialUpdateOK, error)

	PoliciesExpressionRead(params *PoliciesExpressionReadParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesExpressionReadOK, error)

	PoliciesExpressionUpdate(params *PoliciesExpressionUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesExpressionUpdateOK, error)

	PoliciesGroupMembershipCreate(params *PoliciesGroupMembershipCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesGroupMembershipCreateCreated, error)

	PoliciesGroupMembershipDelete(params *PoliciesGroupMembershipDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesGroupMembershipDeleteNoContent, error)

	PoliciesGroupMembershipList(params *PoliciesGroupMembershipListParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesGroupMembershipListOK, error)

	PoliciesGroupMembershipPartialUpdate(params *PoliciesGroupMembershipPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesGroupMembershipPartialUpdateOK, error)

	PoliciesGroupMembershipRead(params *PoliciesGroupMembershipReadParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesGroupMembershipReadOK, error)

	PoliciesGroupMembershipUpdate(params *PoliciesGroupMembershipUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesGroupMembershipUpdateOK, error)

	PoliciesHaveibeenpwnedCreate(params *PoliciesHaveibeenpwnedCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesHaveibeenpwnedCreateCreated, error)

	PoliciesHaveibeenpwnedDelete(params *PoliciesHaveibeenpwnedDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesHaveibeenpwnedDeleteNoContent, error)

	PoliciesHaveibeenpwnedList(params *PoliciesHaveibeenpwnedListParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesHaveibeenpwnedListOK, error)

	PoliciesHaveibeenpwnedPartialUpdate(params *PoliciesHaveibeenpwnedPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesHaveibeenpwnedPartialUpdateOK, error)

	PoliciesHaveibeenpwnedRead(params *PoliciesHaveibeenpwnedReadParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesHaveibeenpwnedReadOK, error)

	PoliciesHaveibeenpwnedUpdate(params *PoliciesHaveibeenpwnedUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesHaveibeenpwnedUpdateOK, error)

	PoliciesPasswordCreate(params *PoliciesPasswordCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordCreateCreated, error)

	PoliciesPasswordDelete(params *PoliciesPasswordDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordDeleteNoContent, error)

	PoliciesPasswordExpiryCreate(params *PoliciesPasswordExpiryCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordExpiryCreateCreated, error)

	PoliciesPasswordExpiryDelete(params *PoliciesPasswordExpiryDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordExpiryDeleteNoContent, error)

	PoliciesPasswordExpiryList(params *PoliciesPasswordExpiryListParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordExpiryListOK, error)

	PoliciesPasswordExpiryPartialUpdate(params *PoliciesPasswordExpiryPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordExpiryPartialUpdateOK, error)

	PoliciesPasswordExpiryRead(params *PoliciesPasswordExpiryReadParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordExpiryReadOK, error)

	PoliciesPasswordExpiryUpdate(params *PoliciesPasswordExpiryUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordExpiryUpdateOK, error)

	PoliciesPasswordList(params *PoliciesPasswordListParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordListOK, error)

	PoliciesPasswordPartialUpdate(params *PoliciesPasswordPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordPartialUpdateOK, error)

	PoliciesPasswordRead(params *PoliciesPasswordReadParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordReadOK, error)

	PoliciesPasswordUpdate(params *PoliciesPasswordUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordUpdateOK, error)

	PoliciesReputationCreate(params *PoliciesReputationCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesReputationCreateCreated, error)

	PoliciesReputationDelete(params *PoliciesReputationDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesReputationDeleteNoContent, error)

	PoliciesReputationList(params *PoliciesReputationListParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesReputationListOK, error)

	PoliciesReputationPartialUpdate(params *PoliciesReputationPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesReputationPartialUpdateOK, error)

	PoliciesReputationRead(params *PoliciesReputationReadParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesReputationReadOK, error)

	PoliciesReputationUpdate(params *PoliciesReputationUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesReputationUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  PoliciesAllList Policy Viewset
*/
func (a *Client) PoliciesAllList(params *PoliciesAllListParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesAllListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesAllListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_all_list",
		Method:             "GET",
		PathPattern:        "/policies/all/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesAllListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesAllListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_all_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesAllRead Policy Viewset
*/
func (a *Client) PoliciesAllRead(params *PoliciesAllReadParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesAllReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesAllReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_all_read",
		Method:             "GET",
		PathPattern:        "/policies/all/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesAllReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesAllReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_all_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesBindingsCreate PolicyBinding Viewset
*/
func (a *Client) PoliciesBindingsCreate(params *PoliciesBindingsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesBindingsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesBindingsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_bindings_create",
		Method:             "POST",
		PathPattern:        "/policies/bindings/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesBindingsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesBindingsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_bindings_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesBindingsDelete PolicyBinding Viewset
*/
func (a *Client) PoliciesBindingsDelete(params *PoliciesBindingsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesBindingsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesBindingsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_bindings_delete",
		Method:             "DELETE",
		PathPattern:        "/policies/bindings/{policy_binding_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesBindingsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesBindingsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_bindings_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesBindingsList PolicyBinding Viewset
*/
func (a *Client) PoliciesBindingsList(params *PoliciesBindingsListParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesBindingsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesBindingsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_bindings_list",
		Method:             "GET",
		PathPattern:        "/policies/bindings/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesBindingsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesBindingsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_bindings_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesBindingsPartialUpdate PolicyBinding Viewset
*/
func (a *Client) PoliciesBindingsPartialUpdate(params *PoliciesBindingsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesBindingsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesBindingsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_bindings_partial_update",
		Method:             "PATCH",
		PathPattern:        "/policies/bindings/{policy_binding_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesBindingsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesBindingsPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_bindings_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesBindingsRead PolicyBinding Viewset
*/
func (a *Client) PoliciesBindingsRead(params *PoliciesBindingsReadParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesBindingsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesBindingsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_bindings_read",
		Method:             "GET",
		PathPattern:        "/policies/bindings/{policy_binding_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesBindingsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesBindingsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_bindings_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesBindingsUpdate PolicyBinding Viewset
*/
func (a *Client) PoliciesBindingsUpdate(params *PoliciesBindingsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesBindingsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesBindingsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_bindings_update",
		Method:             "PUT",
		PathPattern:        "/policies/bindings/{policy_binding_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesBindingsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesBindingsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_bindings_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesDummyCreate Dummy Viewset
*/
func (a *Client) PoliciesDummyCreate(params *PoliciesDummyCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesDummyCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesDummyCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_dummy_create",
		Method:             "POST",
		PathPattern:        "/policies/dummy/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesDummyCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesDummyCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_dummy_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesDummyDelete Dummy Viewset
*/
func (a *Client) PoliciesDummyDelete(params *PoliciesDummyDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesDummyDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesDummyDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_dummy_delete",
		Method:             "DELETE",
		PathPattern:        "/policies/dummy/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesDummyDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesDummyDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_dummy_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesDummyList Dummy Viewset
*/
func (a *Client) PoliciesDummyList(params *PoliciesDummyListParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesDummyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesDummyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_dummy_list",
		Method:             "GET",
		PathPattern:        "/policies/dummy/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesDummyListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesDummyListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_dummy_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesDummyPartialUpdate Dummy Viewset
*/
func (a *Client) PoliciesDummyPartialUpdate(params *PoliciesDummyPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesDummyPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesDummyPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_dummy_partial_update",
		Method:             "PATCH",
		PathPattern:        "/policies/dummy/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesDummyPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesDummyPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_dummy_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesDummyRead Dummy Viewset
*/
func (a *Client) PoliciesDummyRead(params *PoliciesDummyReadParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesDummyReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesDummyReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_dummy_read",
		Method:             "GET",
		PathPattern:        "/policies/dummy/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesDummyReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesDummyReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_dummy_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesDummyUpdate Dummy Viewset
*/
func (a *Client) PoliciesDummyUpdate(params *PoliciesDummyUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesDummyUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesDummyUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_dummy_update",
		Method:             "PUT",
		PathPattern:        "/policies/dummy/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesDummyUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesDummyUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_dummy_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesExpressionCreate Source Viewset
*/
func (a *Client) PoliciesExpressionCreate(params *PoliciesExpressionCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesExpressionCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesExpressionCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_expression_create",
		Method:             "POST",
		PathPattern:        "/policies/expression/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesExpressionCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesExpressionCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_expression_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesExpressionDelete Source Viewset
*/
func (a *Client) PoliciesExpressionDelete(params *PoliciesExpressionDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesExpressionDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesExpressionDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_expression_delete",
		Method:             "DELETE",
		PathPattern:        "/policies/expression/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesExpressionDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesExpressionDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_expression_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesExpressionList Source Viewset
*/
func (a *Client) PoliciesExpressionList(params *PoliciesExpressionListParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesExpressionListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesExpressionListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_expression_list",
		Method:             "GET",
		PathPattern:        "/policies/expression/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesExpressionListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesExpressionListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_expression_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesExpressionPartialUpdate Source Viewset
*/
func (a *Client) PoliciesExpressionPartialUpdate(params *PoliciesExpressionPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesExpressionPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesExpressionPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_expression_partial_update",
		Method:             "PATCH",
		PathPattern:        "/policies/expression/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesExpressionPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesExpressionPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_expression_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesExpressionRead Source Viewset
*/
func (a *Client) PoliciesExpressionRead(params *PoliciesExpressionReadParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesExpressionReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesExpressionReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_expression_read",
		Method:             "GET",
		PathPattern:        "/policies/expression/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesExpressionReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesExpressionReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_expression_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesExpressionUpdate Source Viewset
*/
func (a *Client) PoliciesExpressionUpdate(params *PoliciesExpressionUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesExpressionUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesExpressionUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_expression_update",
		Method:             "PUT",
		PathPattern:        "/policies/expression/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesExpressionUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesExpressionUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_expression_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesGroupMembershipCreate Group Membership Policy Viewset
*/
func (a *Client) PoliciesGroupMembershipCreate(params *PoliciesGroupMembershipCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesGroupMembershipCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesGroupMembershipCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_group_membership_create",
		Method:             "POST",
		PathPattern:        "/policies/group_membership/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesGroupMembershipCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesGroupMembershipCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_group_membership_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesGroupMembershipDelete Group Membership Policy Viewset
*/
func (a *Client) PoliciesGroupMembershipDelete(params *PoliciesGroupMembershipDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesGroupMembershipDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesGroupMembershipDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_group_membership_delete",
		Method:             "DELETE",
		PathPattern:        "/policies/group_membership/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesGroupMembershipDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesGroupMembershipDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_group_membership_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesGroupMembershipList Group Membership Policy Viewset
*/
func (a *Client) PoliciesGroupMembershipList(params *PoliciesGroupMembershipListParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesGroupMembershipListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesGroupMembershipListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_group_membership_list",
		Method:             "GET",
		PathPattern:        "/policies/group_membership/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesGroupMembershipListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesGroupMembershipListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_group_membership_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesGroupMembershipPartialUpdate Group Membership Policy Viewset
*/
func (a *Client) PoliciesGroupMembershipPartialUpdate(params *PoliciesGroupMembershipPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesGroupMembershipPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesGroupMembershipPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_group_membership_partial_update",
		Method:             "PATCH",
		PathPattern:        "/policies/group_membership/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesGroupMembershipPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesGroupMembershipPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_group_membership_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesGroupMembershipRead Group Membership Policy Viewset
*/
func (a *Client) PoliciesGroupMembershipRead(params *PoliciesGroupMembershipReadParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesGroupMembershipReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesGroupMembershipReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_group_membership_read",
		Method:             "GET",
		PathPattern:        "/policies/group_membership/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesGroupMembershipReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesGroupMembershipReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_group_membership_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesGroupMembershipUpdate Group Membership Policy Viewset
*/
func (a *Client) PoliciesGroupMembershipUpdate(params *PoliciesGroupMembershipUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesGroupMembershipUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesGroupMembershipUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_group_membership_update",
		Method:             "PUT",
		PathPattern:        "/policies/group_membership/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesGroupMembershipUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesGroupMembershipUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_group_membership_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesHaveibeenpwnedCreate Source Viewset
*/
func (a *Client) PoliciesHaveibeenpwnedCreate(params *PoliciesHaveibeenpwnedCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesHaveibeenpwnedCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesHaveibeenpwnedCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_haveibeenpwned_create",
		Method:             "POST",
		PathPattern:        "/policies/haveibeenpwned/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesHaveibeenpwnedCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesHaveibeenpwnedCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_haveibeenpwned_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesHaveibeenpwnedDelete Source Viewset
*/
func (a *Client) PoliciesHaveibeenpwnedDelete(params *PoliciesHaveibeenpwnedDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesHaveibeenpwnedDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesHaveibeenpwnedDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_haveibeenpwned_delete",
		Method:             "DELETE",
		PathPattern:        "/policies/haveibeenpwned/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesHaveibeenpwnedDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesHaveibeenpwnedDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_haveibeenpwned_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesHaveibeenpwnedList Source Viewset
*/
func (a *Client) PoliciesHaveibeenpwnedList(params *PoliciesHaveibeenpwnedListParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesHaveibeenpwnedListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesHaveibeenpwnedListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_haveibeenpwned_list",
		Method:             "GET",
		PathPattern:        "/policies/haveibeenpwned/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesHaveibeenpwnedListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesHaveibeenpwnedListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_haveibeenpwned_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesHaveibeenpwnedPartialUpdate Source Viewset
*/
func (a *Client) PoliciesHaveibeenpwnedPartialUpdate(params *PoliciesHaveibeenpwnedPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesHaveibeenpwnedPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesHaveibeenpwnedPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_haveibeenpwned_partial_update",
		Method:             "PATCH",
		PathPattern:        "/policies/haveibeenpwned/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesHaveibeenpwnedPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesHaveibeenpwnedPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_haveibeenpwned_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesHaveibeenpwnedRead Source Viewset
*/
func (a *Client) PoliciesHaveibeenpwnedRead(params *PoliciesHaveibeenpwnedReadParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesHaveibeenpwnedReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesHaveibeenpwnedReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_haveibeenpwned_read",
		Method:             "GET",
		PathPattern:        "/policies/haveibeenpwned/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesHaveibeenpwnedReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesHaveibeenpwnedReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_haveibeenpwned_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesHaveibeenpwnedUpdate Source Viewset
*/
func (a *Client) PoliciesHaveibeenpwnedUpdate(params *PoliciesHaveibeenpwnedUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesHaveibeenpwnedUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesHaveibeenpwnedUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_haveibeenpwned_update",
		Method:             "PUT",
		PathPattern:        "/policies/haveibeenpwned/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesHaveibeenpwnedUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesHaveibeenpwnedUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_haveibeenpwned_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesPasswordCreate Password Policy Viewset
*/
func (a *Client) PoliciesPasswordCreate(params *PoliciesPasswordCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesPasswordCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_password_create",
		Method:             "POST",
		PathPattern:        "/policies/password/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesPasswordCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesPasswordCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_password_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesPasswordDelete Password Policy Viewset
*/
func (a *Client) PoliciesPasswordDelete(params *PoliciesPasswordDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesPasswordDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_password_delete",
		Method:             "DELETE",
		PathPattern:        "/policies/password/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesPasswordDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesPasswordDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_password_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesPasswordExpiryCreate Password Expiry Viewset
*/
func (a *Client) PoliciesPasswordExpiryCreate(params *PoliciesPasswordExpiryCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordExpiryCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesPasswordExpiryCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_password_expiry_create",
		Method:             "POST",
		PathPattern:        "/policies/password_expiry/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesPasswordExpiryCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesPasswordExpiryCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_password_expiry_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesPasswordExpiryDelete Password Expiry Viewset
*/
func (a *Client) PoliciesPasswordExpiryDelete(params *PoliciesPasswordExpiryDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordExpiryDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesPasswordExpiryDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_password_expiry_delete",
		Method:             "DELETE",
		PathPattern:        "/policies/password_expiry/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesPasswordExpiryDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesPasswordExpiryDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_password_expiry_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesPasswordExpiryList Password Expiry Viewset
*/
func (a *Client) PoliciesPasswordExpiryList(params *PoliciesPasswordExpiryListParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordExpiryListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesPasswordExpiryListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_password_expiry_list",
		Method:             "GET",
		PathPattern:        "/policies/password_expiry/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesPasswordExpiryListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesPasswordExpiryListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_password_expiry_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesPasswordExpiryPartialUpdate Password Expiry Viewset
*/
func (a *Client) PoliciesPasswordExpiryPartialUpdate(params *PoliciesPasswordExpiryPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordExpiryPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesPasswordExpiryPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_password_expiry_partial_update",
		Method:             "PATCH",
		PathPattern:        "/policies/password_expiry/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesPasswordExpiryPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesPasswordExpiryPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_password_expiry_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesPasswordExpiryRead Password Expiry Viewset
*/
func (a *Client) PoliciesPasswordExpiryRead(params *PoliciesPasswordExpiryReadParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordExpiryReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesPasswordExpiryReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_password_expiry_read",
		Method:             "GET",
		PathPattern:        "/policies/password_expiry/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesPasswordExpiryReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesPasswordExpiryReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_password_expiry_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesPasswordExpiryUpdate Password Expiry Viewset
*/
func (a *Client) PoliciesPasswordExpiryUpdate(params *PoliciesPasswordExpiryUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordExpiryUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesPasswordExpiryUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_password_expiry_update",
		Method:             "PUT",
		PathPattern:        "/policies/password_expiry/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesPasswordExpiryUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesPasswordExpiryUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_password_expiry_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesPasswordList Password Policy Viewset
*/
func (a *Client) PoliciesPasswordList(params *PoliciesPasswordListParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesPasswordListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_password_list",
		Method:             "GET",
		PathPattern:        "/policies/password/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesPasswordListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesPasswordListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_password_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesPasswordPartialUpdate Password Policy Viewset
*/
func (a *Client) PoliciesPasswordPartialUpdate(params *PoliciesPasswordPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesPasswordPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_password_partial_update",
		Method:             "PATCH",
		PathPattern:        "/policies/password/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesPasswordPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesPasswordPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_password_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesPasswordRead Password Policy Viewset
*/
func (a *Client) PoliciesPasswordRead(params *PoliciesPasswordReadParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesPasswordReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_password_read",
		Method:             "GET",
		PathPattern:        "/policies/password/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesPasswordReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesPasswordReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_password_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesPasswordUpdate Password Policy Viewset
*/
func (a *Client) PoliciesPasswordUpdate(params *PoliciesPasswordUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesPasswordUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesPasswordUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_password_update",
		Method:             "PUT",
		PathPattern:        "/policies/password/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesPasswordUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesPasswordUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_password_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesReputationCreate Source Viewset
*/
func (a *Client) PoliciesReputationCreate(params *PoliciesReputationCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesReputationCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesReputationCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_reputation_create",
		Method:             "POST",
		PathPattern:        "/policies/reputation/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesReputationCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesReputationCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_reputation_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesReputationDelete Source Viewset
*/
func (a *Client) PoliciesReputationDelete(params *PoliciesReputationDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesReputationDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesReputationDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_reputation_delete",
		Method:             "DELETE",
		PathPattern:        "/policies/reputation/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesReputationDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesReputationDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_reputation_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesReputationList Source Viewset
*/
func (a *Client) PoliciesReputationList(params *PoliciesReputationListParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesReputationListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesReputationListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_reputation_list",
		Method:             "GET",
		PathPattern:        "/policies/reputation/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesReputationListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesReputationListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_reputation_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesReputationPartialUpdate Source Viewset
*/
func (a *Client) PoliciesReputationPartialUpdate(params *PoliciesReputationPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesReputationPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesReputationPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_reputation_partial_update",
		Method:             "PATCH",
		PathPattern:        "/policies/reputation/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesReputationPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesReputationPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_reputation_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesReputationRead Source Viewset
*/
func (a *Client) PoliciesReputationRead(params *PoliciesReputationReadParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesReputationReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesReputationReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_reputation_read",
		Method:             "GET",
		PathPattern:        "/policies/reputation/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesReputationReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesReputationReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_reputation_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PoliciesReputationUpdate Source Viewset
*/
func (a *Client) PoliciesReputationUpdate(params *PoliciesReputationUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PoliciesReputationUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesReputationUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "policies_reputation_update",
		Method:             "PUT",
		PathPattern:        "/policies/reputation/{policy_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesReputationUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesReputationUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policies_reputation_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
