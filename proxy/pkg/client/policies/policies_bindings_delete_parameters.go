// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPoliciesBindingsDeleteParams creates a new PoliciesBindingsDeleteParams object
// with the default values initialized.
func NewPoliciesBindingsDeleteParams() *PoliciesBindingsDeleteParams {
	var ()
	return &PoliciesBindingsDeleteParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPoliciesBindingsDeleteParamsWithTimeout creates a new PoliciesBindingsDeleteParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPoliciesBindingsDeleteParamsWithTimeout(timeout time.Duration) *PoliciesBindingsDeleteParams {
	var ()
	return &PoliciesBindingsDeleteParams{

		timeout: timeout,
	}
}

// NewPoliciesBindingsDeleteParamsWithContext creates a new PoliciesBindingsDeleteParams object
// with the default values initialized, and the ability to set a context for a request
func NewPoliciesBindingsDeleteParamsWithContext(ctx context.Context) *PoliciesBindingsDeleteParams {
	var ()
	return &PoliciesBindingsDeleteParams{

		Context: ctx,
	}
}

// NewPoliciesBindingsDeleteParamsWithHTTPClient creates a new PoliciesBindingsDeleteParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPoliciesBindingsDeleteParamsWithHTTPClient(client *http.Client) *PoliciesBindingsDeleteParams {
	var ()
	return &PoliciesBindingsDeleteParams{
		HTTPClient: client,
	}
}

/*PoliciesBindingsDeleteParams contains all the parameters to send to the API endpoint
for the policies bindings delete operation typically these are written to a http.Request
*/
type PoliciesBindingsDeleteParams struct {

	/*PolicyBindingUUID
	  A UUID string identifying this Policy Binding.

	*/
	PolicyBindingUUID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the policies bindings delete params
func (o *PoliciesBindingsDeleteParams) WithTimeout(timeout time.Duration) *PoliciesBindingsDeleteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the policies bindings delete params
func (o *PoliciesBindingsDeleteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the policies bindings delete params
func (o *PoliciesBindingsDeleteParams) WithContext(ctx context.Context) *PoliciesBindingsDeleteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the policies bindings delete params
func (o *PoliciesBindingsDeleteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the policies bindings delete params
func (o *PoliciesBindingsDeleteParams) WithHTTPClient(client *http.Client) *PoliciesBindingsDeleteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the policies bindings delete params
func (o *PoliciesBindingsDeleteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPolicyBindingUUID adds the policyBindingUUID to the policies bindings delete params
func (o *PoliciesBindingsDeleteParams) WithPolicyBindingUUID(policyBindingUUID strfmt.UUID) *PoliciesBindingsDeleteParams {
	o.SetPolicyBindingUUID(policyBindingUUID)
	return o
}

// SetPolicyBindingUUID adds the policyBindingUuid to the policies bindings delete params
func (o *PoliciesBindingsDeleteParams) SetPolicyBindingUUID(policyBindingUUID strfmt.UUID) {
	o.PolicyBindingUUID = policyBindingUUID
}

// WriteToRequest writes these params to a swagger request
func (o *PoliciesBindingsDeleteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param policy_binding_uuid
	if err := r.SetPathParam("policy_binding_uuid", o.PolicyBindingUUID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
