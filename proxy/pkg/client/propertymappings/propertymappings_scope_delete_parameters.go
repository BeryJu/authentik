// Code generated by go-swagger; DO NOT EDIT.

package propertymappings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPropertymappingsScopeDeleteParams creates a new PropertymappingsScopeDeleteParams object
// with the default values initialized.
func NewPropertymappingsScopeDeleteParams() *PropertymappingsScopeDeleteParams {
	var ()
	return &PropertymappingsScopeDeleteParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPropertymappingsScopeDeleteParamsWithTimeout creates a new PropertymappingsScopeDeleteParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPropertymappingsScopeDeleteParamsWithTimeout(timeout time.Duration) *PropertymappingsScopeDeleteParams {
	var ()
	return &PropertymappingsScopeDeleteParams{

		timeout: timeout,
	}
}

// NewPropertymappingsScopeDeleteParamsWithContext creates a new PropertymappingsScopeDeleteParams object
// with the default values initialized, and the ability to set a context for a request
func NewPropertymappingsScopeDeleteParamsWithContext(ctx context.Context) *PropertymappingsScopeDeleteParams {
	var ()
	return &PropertymappingsScopeDeleteParams{

		Context: ctx,
	}
}

// NewPropertymappingsScopeDeleteParamsWithHTTPClient creates a new PropertymappingsScopeDeleteParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPropertymappingsScopeDeleteParamsWithHTTPClient(client *http.Client) *PropertymappingsScopeDeleteParams {
	var ()
	return &PropertymappingsScopeDeleteParams{
		HTTPClient: client,
	}
}

/*PropertymappingsScopeDeleteParams contains all the parameters to send to the API endpoint
for the propertymappings scope delete operation typically these are written to a http.Request
*/
type PropertymappingsScopeDeleteParams struct {

	/*PmUUID
	  A UUID string identifying this Scope Mapping.

	*/
	PmUUID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the propertymappings scope delete params
func (o *PropertymappingsScopeDeleteParams) WithTimeout(timeout time.Duration) *PropertymappingsScopeDeleteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the propertymappings scope delete params
func (o *PropertymappingsScopeDeleteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the propertymappings scope delete params
func (o *PropertymappingsScopeDeleteParams) WithContext(ctx context.Context) *PropertymappingsScopeDeleteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the propertymappings scope delete params
func (o *PropertymappingsScopeDeleteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the propertymappings scope delete params
func (o *PropertymappingsScopeDeleteParams) WithHTTPClient(client *http.Client) *PropertymappingsScopeDeleteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the propertymappings scope delete params
func (o *PropertymappingsScopeDeleteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPmUUID adds the pmUUID to the propertymappings scope delete params
func (o *PropertymappingsScopeDeleteParams) WithPmUUID(pmUUID strfmt.UUID) *PropertymappingsScopeDeleteParams {
	o.SetPmUUID(pmUUID)
	return o
}

// SetPmUUID adds the pmUuid to the propertymappings scope delete params
func (o *PropertymappingsScopeDeleteParams) SetPmUUID(pmUUID strfmt.UUID) {
	o.PmUUID = pmUUID
}

// WriteToRequest writes these params to a swagger request
func (o *PropertymappingsScopeDeleteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param pm_uuid
	if err := r.SetPathParam("pm_uuid", o.PmUUID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
