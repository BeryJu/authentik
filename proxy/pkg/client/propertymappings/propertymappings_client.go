// Code generated by go-swagger; DO NOT EDIT.

package propertymappings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new propertymappings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for propertymappings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	PropertymappingsAllList(params *PropertymappingsAllListParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsAllListOK, error)

	PropertymappingsAllRead(params *PropertymappingsAllReadParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsAllReadOK, error)

	PropertymappingsLdapCreate(params *PropertymappingsLdapCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsLdapCreateCreated, error)

	PropertymappingsLdapDelete(params *PropertymappingsLdapDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsLdapDeleteNoContent, error)

	PropertymappingsLdapList(params *PropertymappingsLdapListParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsLdapListOK, error)

	PropertymappingsLdapPartialUpdate(params *PropertymappingsLdapPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsLdapPartialUpdateOK, error)

	PropertymappingsLdapRead(params *PropertymappingsLdapReadParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsLdapReadOK, error)

	PropertymappingsLdapUpdate(params *PropertymappingsLdapUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsLdapUpdateOK, error)

	PropertymappingsSamlCreate(params *PropertymappingsSamlCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsSamlCreateCreated, error)

	PropertymappingsSamlDelete(params *PropertymappingsSamlDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsSamlDeleteNoContent, error)

	PropertymappingsSamlList(params *PropertymappingsSamlListParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsSamlListOK, error)

	PropertymappingsSamlPartialUpdate(params *PropertymappingsSamlPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsSamlPartialUpdateOK, error)

	PropertymappingsSamlRead(params *PropertymappingsSamlReadParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsSamlReadOK, error)

	PropertymappingsSamlUpdate(params *PropertymappingsSamlUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsSamlUpdateOK, error)

	PropertymappingsScopeCreate(params *PropertymappingsScopeCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsScopeCreateCreated, error)

	PropertymappingsScopeDelete(params *PropertymappingsScopeDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsScopeDeleteNoContent, error)

	PropertymappingsScopeList(params *PropertymappingsScopeListParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsScopeListOK, error)

	PropertymappingsScopePartialUpdate(params *PropertymappingsScopePartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsScopePartialUpdateOK, error)

	PropertymappingsScopeRead(params *PropertymappingsScopeReadParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsScopeReadOK, error)

	PropertymappingsScopeUpdate(params *PropertymappingsScopeUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsScopeUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  PropertymappingsAllList PropertyMapping Viewset
*/
func (a *Client) PropertymappingsAllList(params *PropertymappingsAllListParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsAllListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPropertymappingsAllListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "propertymappings_all_list",
		Method:             "GET",
		PathPattern:        "/propertymappings/all/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PropertymappingsAllListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PropertymappingsAllListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for propertymappings_all_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PropertymappingsAllRead PropertyMapping Viewset
*/
func (a *Client) PropertymappingsAllRead(params *PropertymappingsAllReadParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsAllReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPropertymappingsAllReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "propertymappings_all_read",
		Method:             "GET",
		PathPattern:        "/propertymappings/all/{pm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PropertymappingsAllReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PropertymappingsAllReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for propertymappings_all_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PropertymappingsLdapCreate LDAP PropertyMapping Viewset
*/
func (a *Client) PropertymappingsLdapCreate(params *PropertymappingsLdapCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsLdapCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPropertymappingsLdapCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "propertymappings_ldap_create",
		Method:             "POST",
		PathPattern:        "/propertymappings/ldap/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PropertymappingsLdapCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PropertymappingsLdapCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for propertymappings_ldap_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PropertymappingsLdapDelete LDAP PropertyMapping Viewset
*/
func (a *Client) PropertymappingsLdapDelete(params *PropertymappingsLdapDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsLdapDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPropertymappingsLdapDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "propertymappings_ldap_delete",
		Method:             "DELETE",
		PathPattern:        "/propertymappings/ldap/{pm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PropertymappingsLdapDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PropertymappingsLdapDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for propertymappings_ldap_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PropertymappingsLdapList LDAP PropertyMapping Viewset
*/
func (a *Client) PropertymappingsLdapList(params *PropertymappingsLdapListParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsLdapListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPropertymappingsLdapListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "propertymappings_ldap_list",
		Method:             "GET",
		PathPattern:        "/propertymappings/ldap/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PropertymappingsLdapListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PropertymappingsLdapListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for propertymappings_ldap_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PropertymappingsLdapPartialUpdate LDAP PropertyMapping Viewset
*/
func (a *Client) PropertymappingsLdapPartialUpdate(params *PropertymappingsLdapPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsLdapPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPropertymappingsLdapPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "propertymappings_ldap_partial_update",
		Method:             "PATCH",
		PathPattern:        "/propertymappings/ldap/{pm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PropertymappingsLdapPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PropertymappingsLdapPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for propertymappings_ldap_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PropertymappingsLdapRead LDAP PropertyMapping Viewset
*/
func (a *Client) PropertymappingsLdapRead(params *PropertymappingsLdapReadParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsLdapReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPropertymappingsLdapReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "propertymappings_ldap_read",
		Method:             "GET",
		PathPattern:        "/propertymappings/ldap/{pm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PropertymappingsLdapReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PropertymappingsLdapReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for propertymappings_ldap_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PropertymappingsLdapUpdate LDAP PropertyMapping Viewset
*/
func (a *Client) PropertymappingsLdapUpdate(params *PropertymappingsLdapUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsLdapUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPropertymappingsLdapUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "propertymappings_ldap_update",
		Method:             "PUT",
		PathPattern:        "/propertymappings/ldap/{pm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PropertymappingsLdapUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PropertymappingsLdapUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for propertymappings_ldap_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PropertymappingsSamlCreate SAMLPropertyMapping Viewset
*/
func (a *Client) PropertymappingsSamlCreate(params *PropertymappingsSamlCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsSamlCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPropertymappingsSamlCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "propertymappings_saml_create",
		Method:             "POST",
		PathPattern:        "/propertymappings/saml/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PropertymappingsSamlCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PropertymappingsSamlCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for propertymappings_saml_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PropertymappingsSamlDelete SAMLPropertyMapping Viewset
*/
func (a *Client) PropertymappingsSamlDelete(params *PropertymappingsSamlDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsSamlDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPropertymappingsSamlDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "propertymappings_saml_delete",
		Method:             "DELETE",
		PathPattern:        "/propertymappings/saml/{pm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PropertymappingsSamlDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PropertymappingsSamlDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for propertymappings_saml_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PropertymappingsSamlList SAMLPropertyMapping Viewset
*/
func (a *Client) PropertymappingsSamlList(params *PropertymappingsSamlListParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsSamlListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPropertymappingsSamlListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "propertymappings_saml_list",
		Method:             "GET",
		PathPattern:        "/propertymappings/saml/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PropertymappingsSamlListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PropertymappingsSamlListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for propertymappings_saml_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PropertymappingsSamlPartialUpdate SAMLPropertyMapping Viewset
*/
func (a *Client) PropertymappingsSamlPartialUpdate(params *PropertymappingsSamlPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsSamlPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPropertymappingsSamlPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "propertymappings_saml_partial_update",
		Method:             "PATCH",
		PathPattern:        "/propertymappings/saml/{pm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PropertymappingsSamlPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PropertymappingsSamlPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for propertymappings_saml_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PropertymappingsSamlRead SAMLPropertyMapping Viewset
*/
func (a *Client) PropertymappingsSamlRead(params *PropertymappingsSamlReadParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsSamlReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPropertymappingsSamlReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "propertymappings_saml_read",
		Method:             "GET",
		PathPattern:        "/propertymappings/saml/{pm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PropertymappingsSamlReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PropertymappingsSamlReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for propertymappings_saml_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PropertymappingsSamlUpdate SAMLPropertyMapping Viewset
*/
func (a *Client) PropertymappingsSamlUpdate(params *PropertymappingsSamlUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsSamlUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPropertymappingsSamlUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "propertymappings_saml_update",
		Method:             "PUT",
		PathPattern:        "/propertymappings/saml/{pm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PropertymappingsSamlUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PropertymappingsSamlUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for propertymappings_saml_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PropertymappingsScopeCreate ScopeMapping Viewset
*/
func (a *Client) PropertymappingsScopeCreate(params *PropertymappingsScopeCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsScopeCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPropertymappingsScopeCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "propertymappings_scope_create",
		Method:             "POST",
		PathPattern:        "/propertymappings/scope/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PropertymappingsScopeCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PropertymappingsScopeCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for propertymappings_scope_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PropertymappingsScopeDelete ScopeMapping Viewset
*/
func (a *Client) PropertymappingsScopeDelete(params *PropertymappingsScopeDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsScopeDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPropertymappingsScopeDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "propertymappings_scope_delete",
		Method:             "DELETE",
		PathPattern:        "/propertymappings/scope/{pm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PropertymappingsScopeDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PropertymappingsScopeDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for propertymappings_scope_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PropertymappingsScopeList ScopeMapping Viewset
*/
func (a *Client) PropertymappingsScopeList(params *PropertymappingsScopeListParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsScopeListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPropertymappingsScopeListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "propertymappings_scope_list",
		Method:             "GET",
		PathPattern:        "/propertymappings/scope/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PropertymappingsScopeListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PropertymappingsScopeListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for propertymappings_scope_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PropertymappingsScopePartialUpdate ScopeMapping Viewset
*/
func (a *Client) PropertymappingsScopePartialUpdate(params *PropertymappingsScopePartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsScopePartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPropertymappingsScopePartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "propertymappings_scope_partial_update",
		Method:             "PATCH",
		PathPattern:        "/propertymappings/scope/{pm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PropertymappingsScopePartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PropertymappingsScopePartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for propertymappings_scope_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PropertymappingsScopeRead ScopeMapping Viewset
*/
func (a *Client) PropertymappingsScopeRead(params *PropertymappingsScopeReadParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsScopeReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPropertymappingsScopeReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "propertymappings_scope_read",
		Method:             "GET",
		PathPattern:        "/propertymappings/scope/{pm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PropertymappingsScopeReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PropertymappingsScopeReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for propertymappings_scope_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PropertymappingsScopeUpdate ScopeMapping Viewset
*/
func (a *Client) PropertymappingsScopeUpdate(params *PropertymappingsScopeUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PropertymappingsScopeUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPropertymappingsScopeUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "propertymappings_scope_update",
		Method:             "PUT",
		PathPattern:        "/propertymappings/scope/{pm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PropertymappingsScopeUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PropertymappingsScopeUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for propertymappings_scope_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
