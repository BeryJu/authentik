// Code generated by go-swagger; DO NOT EDIT.

package flows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFlowsBindingsListParams creates a new FlowsBindingsListParams object
// with the default values initialized.
func NewFlowsBindingsListParams() *FlowsBindingsListParams {
	var ()
	return &FlowsBindingsListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewFlowsBindingsListParamsWithTimeout creates a new FlowsBindingsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewFlowsBindingsListParamsWithTimeout(timeout time.Duration) *FlowsBindingsListParams {
	var ()
	return &FlowsBindingsListParams{

		timeout: timeout,
	}
}

// NewFlowsBindingsListParamsWithContext creates a new FlowsBindingsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewFlowsBindingsListParamsWithContext(ctx context.Context) *FlowsBindingsListParams {
	var ()
	return &FlowsBindingsListParams{

		Context: ctx,
	}
}

// NewFlowsBindingsListParamsWithHTTPClient creates a new FlowsBindingsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewFlowsBindingsListParamsWithHTTPClient(client *http.Client) *FlowsBindingsListParams {
	var ()
	return &FlowsBindingsListParams{
		HTTPClient: client,
	}
}

/*FlowsBindingsListParams contains all the parameters to send to the API endpoint
for the flows bindings list operation typically these are written to a http.Request
*/
type FlowsBindingsListParams struct {

	/*FsbUUID*/
	FsbUUID *string
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*Order*/
	Order *float64
	/*Ordering
	  Which field to use when ordering the results.

	*/
	Ordering *string
	/*PbmUUID*/
	PbmUUID *string
	/*Policies*/
	Policies *string
	/*ReEvaluatePolicies*/
	ReEvaluatePolicies *string
	/*Search
	  A search term.

	*/
	Search *string
	/*Stage*/
	Stage *string
	/*Target*/
	Target *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the flows bindings list params
func (o *FlowsBindingsListParams) WithTimeout(timeout time.Duration) *FlowsBindingsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the flows bindings list params
func (o *FlowsBindingsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the flows bindings list params
func (o *FlowsBindingsListParams) WithContext(ctx context.Context) *FlowsBindingsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the flows bindings list params
func (o *FlowsBindingsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the flows bindings list params
func (o *FlowsBindingsListParams) WithHTTPClient(client *http.Client) *FlowsBindingsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the flows bindings list params
func (o *FlowsBindingsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFsbUUID adds the fsbUUID to the flows bindings list params
func (o *FlowsBindingsListParams) WithFsbUUID(fsbUUID *string) *FlowsBindingsListParams {
	o.SetFsbUUID(fsbUUID)
	return o
}

// SetFsbUUID adds the fsbUuid to the flows bindings list params
func (o *FlowsBindingsListParams) SetFsbUUID(fsbUUID *string) {
	o.FsbUUID = fsbUUID
}

// WithLimit adds the limit to the flows bindings list params
func (o *FlowsBindingsListParams) WithLimit(limit *int64) *FlowsBindingsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the flows bindings list params
func (o *FlowsBindingsListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the flows bindings list params
func (o *FlowsBindingsListParams) WithOffset(offset *int64) *FlowsBindingsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the flows bindings list params
func (o *FlowsBindingsListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrder adds the order to the flows bindings list params
func (o *FlowsBindingsListParams) WithOrder(order *float64) *FlowsBindingsListParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the flows bindings list params
func (o *FlowsBindingsListParams) SetOrder(order *float64) {
	o.Order = order
}

// WithOrdering adds the ordering to the flows bindings list params
func (o *FlowsBindingsListParams) WithOrdering(ordering *string) *FlowsBindingsListParams {
	o.SetOrdering(ordering)
	return o
}

// SetOrdering adds the ordering to the flows bindings list params
func (o *FlowsBindingsListParams) SetOrdering(ordering *string) {
	o.Ordering = ordering
}

// WithPbmUUID adds the pbmUUID to the flows bindings list params
func (o *FlowsBindingsListParams) WithPbmUUID(pbmUUID *string) *FlowsBindingsListParams {
	o.SetPbmUUID(pbmUUID)
	return o
}

// SetPbmUUID adds the pbmUuid to the flows bindings list params
func (o *FlowsBindingsListParams) SetPbmUUID(pbmUUID *string) {
	o.PbmUUID = pbmUUID
}

// WithPolicies adds the policies to the flows bindings list params
func (o *FlowsBindingsListParams) WithPolicies(policies *string) *FlowsBindingsListParams {
	o.SetPolicies(policies)
	return o
}

// SetPolicies adds the policies to the flows bindings list params
func (o *FlowsBindingsListParams) SetPolicies(policies *string) {
	o.Policies = policies
}

// WithReEvaluatePolicies adds the reEvaluatePolicies to the flows bindings list params
func (o *FlowsBindingsListParams) WithReEvaluatePolicies(reEvaluatePolicies *string) *FlowsBindingsListParams {
	o.SetReEvaluatePolicies(reEvaluatePolicies)
	return o
}

// SetReEvaluatePolicies adds the reEvaluatePolicies to the flows bindings list params
func (o *FlowsBindingsListParams) SetReEvaluatePolicies(reEvaluatePolicies *string) {
	o.ReEvaluatePolicies = reEvaluatePolicies
}

// WithSearch adds the search to the flows bindings list params
func (o *FlowsBindingsListParams) WithSearch(search *string) *FlowsBindingsListParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the flows bindings list params
func (o *FlowsBindingsListParams) SetSearch(search *string) {
	o.Search = search
}

// WithStage adds the stage to the flows bindings list params
func (o *FlowsBindingsListParams) WithStage(stage *string) *FlowsBindingsListParams {
	o.SetStage(stage)
	return o
}

// SetStage adds the stage to the flows bindings list params
func (o *FlowsBindingsListParams) SetStage(stage *string) {
	o.Stage = stage
}

// WithTarget adds the target to the flows bindings list params
func (o *FlowsBindingsListParams) WithTarget(target *string) *FlowsBindingsListParams {
	o.SetTarget(target)
	return o
}

// SetTarget adds the target to the flows bindings list params
func (o *FlowsBindingsListParams) SetTarget(target *string) {
	o.Target = target
}

// WriteToRequest writes these params to a swagger request
func (o *FlowsBindingsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FsbUUID != nil {

		// query param fsb_uuid
		var qrFsbUUID string
		if o.FsbUUID != nil {
			qrFsbUUID = *o.FsbUUID
		}
		qFsbUUID := qrFsbUUID
		if qFsbUUID != "" {
			if err := r.SetQueryParam("fsb_uuid", qFsbUUID); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Order != nil {

		// query param order
		var qrOrder float64
		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := swag.FormatFloat64(qrOrder)
		if qOrder != "" {
			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}

	}

	if o.Ordering != nil {

		// query param ordering
		var qrOrdering string
		if o.Ordering != nil {
			qrOrdering = *o.Ordering
		}
		qOrdering := qrOrdering
		if qOrdering != "" {
			if err := r.SetQueryParam("ordering", qOrdering); err != nil {
				return err
			}
		}

	}

	if o.PbmUUID != nil {

		// query param pbm_uuid
		var qrPbmUUID string
		if o.PbmUUID != nil {
			qrPbmUUID = *o.PbmUUID
		}
		qPbmUUID := qrPbmUUID
		if qPbmUUID != "" {
			if err := r.SetQueryParam("pbm_uuid", qPbmUUID); err != nil {
				return err
			}
		}

	}

	if o.Policies != nil {

		// query param policies
		var qrPolicies string
		if o.Policies != nil {
			qrPolicies = *o.Policies
		}
		qPolicies := qrPolicies
		if qPolicies != "" {
			if err := r.SetQueryParam("policies", qPolicies); err != nil {
				return err
			}
		}

	}

	if o.ReEvaluatePolicies != nil {

		// query param re_evaluate_policies
		var qrReEvaluatePolicies string
		if o.ReEvaluatePolicies != nil {
			qrReEvaluatePolicies = *o.ReEvaluatePolicies
		}
		qReEvaluatePolicies := qrReEvaluatePolicies
		if qReEvaluatePolicies != "" {
			if err := r.SetQueryParam("re_evaluate_policies", qReEvaluatePolicies); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.Stage != nil {

		// query param stage
		var qrStage string
		if o.Stage != nil {
			qrStage = *o.Stage
		}
		qStage := qrStage
		if qStage != "" {
			if err := r.SetQueryParam("stage", qStage); err != nil {
				return err
			}
		}

	}

	if o.Target != nil {

		// query param target
		var qrTarget string
		if o.Target != nil {
			qrTarget = *o.Target
		}
		qTarget := qrTarget
		if qTarget != "" {
			if err := r.SetQueryParam("target", qTarget); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
