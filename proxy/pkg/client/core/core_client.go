// Code generated by go-swagger; DO NOT EDIT.

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new core API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for core API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CoreApplicationsCreate(params *CoreApplicationsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*CoreApplicationsCreateCreated, error)

	CoreApplicationsDelete(params *CoreApplicationsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*CoreApplicationsDeleteNoContent, error)

	CoreApplicationsList(params *CoreApplicationsListParams, authInfo runtime.ClientAuthInfoWriter) (*CoreApplicationsListOK, error)

	CoreApplicationsPartialUpdate(params *CoreApplicationsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*CoreApplicationsPartialUpdateOK, error)

	CoreApplicationsRead(params *CoreApplicationsReadParams, authInfo runtime.ClientAuthInfoWriter) (*CoreApplicationsReadOK, error)

	CoreApplicationsUpdate(params *CoreApplicationsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*CoreApplicationsUpdateOK, error)

	CoreGroupsCreate(params *CoreGroupsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*CoreGroupsCreateCreated, error)

	CoreGroupsDelete(params *CoreGroupsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*CoreGroupsDeleteNoContent, error)

	CoreGroupsList(params *CoreGroupsListParams, authInfo runtime.ClientAuthInfoWriter) (*CoreGroupsListOK, error)

	CoreGroupsPartialUpdate(params *CoreGroupsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*CoreGroupsPartialUpdateOK, error)

	CoreGroupsRead(params *CoreGroupsReadParams, authInfo runtime.ClientAuthInfoWriter) (*CoreGroupsReadOK, error)

	CoreGroupsUpdate(params *CoreGroupsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*CoreGroupsUpdateOK, error)

	CoreUsersCreate(params *CoreUsersCreateParams, authInfo runtime.ClientAuthInfoWriter) (*CoreUsersCreateCreated, error)

	CoreUsersDelete(params *CoreUsersDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*CoreUsersDeleteNoContent, error)

	CoreUsersList(params *CoreUsersListParams, authInfo runtime.ClientAuthInfoWriter) (*CoreUsersListOK, error)

	CoreUsersPartialUpdate(params *CoreUsersPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*CoreUsersPartialUpdateOK, error)

	CoreUsersRead(params *CoreUsersReadParams, authInfo runtime.ClientAuthInfoWriter) (*CoreUsersReadOK, error)

	CoreUsersUpdate(params *CoreUsersUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*CoreUsersUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CoreApplicationsCreate Application Viewset
*/
func (a *Client) CoreApplicationsCreate(params *CoreApplicationsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*CoreApplicationsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreApplicationsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "core_applications_create",
		Method:             "POST",
		PathPattern:        "/core/applications/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreApplicationsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreApplicationsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_applications_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CoreApplicationsDelete Application Viewset
*/
func (a *Client) CoreApplicationsDelete(params *CoreApplicationsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*CoreApplicationsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreApplicationsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "core_applications_delete",
		Method:             "DELETE",
		PathPattern:        "/core/applications/{pbm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreApplicationsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreApplicationsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_applications_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CoreApplicationsList Application Viewset
*/
func (a *Client) CoreApplicationsList(params *CoreApplicationsListParams, authInfo runtime.ClientAuthInfoWriter) (*CoreApplicationsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreApplicationsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "core_applications_list",
		Method:             "GET",
		PathPattern:        "/core/applications/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreApplicationsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreApplicationsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_applications_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CoreApplicationsPartialUpdate Application Viewset
*/
func (a *Client) CoreApplicationsPartialUpdate(params *CoreApplicationsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*CoreApplicationsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreApplicationsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "core_applications_partial_update",
		Method:             "PATCH",
		PathPattern:        "/core/applications/{pbm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreApplicationsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreApplicationsPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_applications_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CoreApplicationsRead Application Viewset
*/
func (a *Client) CoreApplicationsRead(params *CoreApplicationsReadParams, authInfo runtime.ClientAuthInfoWriter) (*CoreApplicationsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreApplicationsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "core_applications_read",
		Method:             "GET",
		PathPattern:        "/core/applications/{pbm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreApplicationsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreApplicationsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_applications_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CoreApplicationsUpdate Application Viewset
*/
func (a *Client) CoreApplicationsUpdate(params *CoreApplicationsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*CoreApplicationsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreApplicationsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "core_applications_update",
		Method:             "PUT",
		PathPattern:        "/core/applications/{pbm_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreApplicationsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreApplicationsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_applications_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CoreGroupsCreate Group Viewset
*/
func (a *Client) CoreGroupsCreate(params *CoreGroupsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*CoreGroupsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreGroupsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "core_groups_create",
		Method:             "POST",
		PathPattern:        "/core/groups/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreGroupsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreGroupsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_groups_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CoreGroupsDelete Group Viewset
*/
func (a *Client) CoreGroupsDelete(params *CoreGroupsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*CoreGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreGroupsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "core_groups_delete",
		Method:             "DELETE",
		PathPattern:        "/core/groups/{group_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreGroupsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreGroupsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_groups_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CoreGroupsList Group Viewset
*/
func (a *Client) CoreGroupsList(params *CoreGroupsListParams, authInfo runtime.ClientAuthInfoWriter) (*CoreGroupsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreGroupsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "core_groups_list",
		Method:             "GET",
		PathPattern:        "/core/groups/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreGroupsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreGroupsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_groups_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CoreGroupsPartialUpdate Group Viewset
*/
func (a *Client) CoreGroupsPartialUpdate(params *CoreGroupsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*CoreGroupsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreGroupsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "core_groups_partial_update",
		Method:             "PATCH",
		PathPattern:        "/core/groups/{group_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreGroupsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreGroupsPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_groups_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CoreGroupsRead Group Viewset
*/
func (a *Client) CoreGroupsRead(params *CoreGroupsReadParams, authInfo runtime.ClientAuthInfoWriter) (*CoreGroupsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreGroupsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "core_groups_read",
		Method:             "GET",
		PathPattern:        "/core/groups/{group_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreGroupsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreGroupsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_groups_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CoreGroupsUpdate Group Viewset
*/
func (a *Client) CoreGroupsUpdate(params *CoreGroupsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*CoreGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreGroupsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "core_groups_update",
		Method:             "PUT",
		PathPattern:        "/core/groups/{group_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreGroupsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreGroupsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_groups_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CoreUsersCreate User Viewset
*/
func (a *Client) CoreUsersCreate(params *CoreUsersCreateParams, authInfo runtime.ClientAuthInfoWriter) (*CoreUsersCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreUsersCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "core_users_create",
		Method:             "POST",
		PathPattern:        "/core/users/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreUsersCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreUsersCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_users_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CoreUsersDelete User Viewset
*/
func (a *Client) CoreUsersDelete(params *CoreUsersDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*CoreUsersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreUsersDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "core_users_delete",
		Method:             "DELETE",
		PathPattern:        "/core/users/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreUsersDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreUsersDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_users_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CoreUsersList User Viewset
*/
func (a *Client) CoreUsersList(params *CoreUsersListParams, authInfo runtime.ClientAuthInfoWriter) (*CoreUsersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreUsersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "core_users_list",
		Method:             "GET",
		PathPattern:        "/core/users/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreUsersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreUsersListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_users_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CoreUsersPartialUpdate User Viewset
*/
func (a *Client) CoreUsersPartialUpdate(params *CoreUsersPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*CoreUsersPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreUsersPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "core_users_partial_update",
		Method:             "PATCH",
		PathPattern:        "/core/users/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreUsersPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreUsersPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_users_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CoreUsersRead User Viewset
*/
func (a *Client) CoreUsersRead(params *CoreUsersReadParams, authInfo runtime.ClientAuthInfoWriter) (*CoreUsersReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreUsersReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "core_users_read",
		Method:             "GET",
		PathPattern:        "/core/users/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreUsersReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreUsersReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_users_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CoreUsersUpdate User Viewset
*/
func (a *Client) CoreUsersUpdate(params *CoreUsersUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*CoreUsersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreUsersUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "core_users_update",
		Method:             "PUT",
		PathPattern:        "/core/users/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreUsersUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreUsersUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_users_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
