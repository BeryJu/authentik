// Code generated by go-swagger; DO NOT EDIT.

package crypto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new crypto API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for crypto API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CryptoCertificatekeypairsCreate(params *CryptoCertificatekeypairsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*CryptoCertificatekeypairsCreateCreated, error)

	CryptoCertificatekeypairsDelete(params *CryptoCertificatekeypairsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*CryptoCertificatekeypairsDeleteNoContent, error)

	CryptoCertificatekeypairsList(params *CryptoCertificatekeypairsListParams, authInfo runtime.ClientAuthInfoWriter) (*CryptoCertificatekeypairsListOK, error)

	CryptoCertificatekeypairsPartialUpdate(params *CryptoCertificatekeypairsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*CryptoCertificatekeypairsPartialUpdateOK, error)

	CryptoCertificatekeypairsRead(params *CryptoCertificatekeypairsReadParams, authInfo runtime.ClientAuthInfoWriter) (*CryptoCertificatekeypairsReadOK, error)

	CryptoCertificatekeypairsUpdate(params *CryptoCertificatekeypairsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*CryptoCertificatekeypairsUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CryptoCertificatekeypairsCreate CertificateKeyPair Viewset
*/
func (a *Client) CryptoCertificatekeypairsCreate(params *CryptoCertificatekeypairsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*CryptoCertificatekeypairsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCryptoCertificatekeypairsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "crypto_certificatekeypairs_create",
		Method:             "POST",
		PathPattern:        "/crypto/certificatekeypairs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CryptoCertificatekeypairsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CryptoCertificatekeypairsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for crypto_certificatekeypairs_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CryptoCertificatekeypairsDelete CertificateKeyPair Viewset
*/
func (a *Client) CryptoCertificatekeypairsDelete(params *CryptoCertificatekeypairsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*CryptoCertificatekeypairsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCryptoCertificatekeypairsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "crypto_certificatekeypairs_delete",
		Method:             "DELETE",
		PathPattern:        "/crypto/certificatekeypairs/{kp_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CryptoCertificatekeypairsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CryptoCertificatekeypairsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for crypto_certificatekeypairs_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CryptoCertificatekeypairsList CertificateKeyPair Viewset
*/
func (a *Client) CryptoCertificatekeypairsList(params *CryptoCertificatekeypairsListParams, authInfo runtime.ClientAuthInfoWriter) (*CryptoCertificatekeypairsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCryptoCertificatekeypairsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "crypto_certificatekeypairs_list",
		Method:             "GET",
		PathPattern:        "/crypto/certificatekeypairs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CryptoCertificatekeypairsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CryptoCertificatekeypairsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for crypto_certificatekeypairs_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CryptoCertificatekeypairsPartialUpdate CertificateKeyPair Viewset
*/
func (a *Client) CryptoCertificatekeypairsPartialUpdate(params *CryptoCertificatekeypairsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*CryptoCertificatekeypairsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCryptoCertificatekeypairsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "crypto_certificatekeypairs_partial_update",
		Method:             "PATCH",
		PathPattern:        "/crypto/certificatekeypairs/{kp_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CryptoCertificatekeypairsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CryptoCertificatekeypairsPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for crypto_certificatekeypairs_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CryptoCertificatekeypairsRead CertificateKeyPair Viewset
*/
func (a *Client) CryptoCertificatekeypairsRead(params *CryptoCertificatekeypairsReadParams, authInfo runtime.ClientAuthInfoWriter) (*CryptoCertificatekeypairsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCryptoCertificatekeypairsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "crypto_certificatekeypairs_read",
		Method:             "GET",
		PathPattern:        "/crypto/certificatekeypairs/{kp_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CryptoCertificatekeypairsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CryptoCertificatekeypairsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for crypto_certificatekeypairs_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CryptoCertificatekeypairsUpdate CertificateKeyPair Viewset
*/
func (a *Client) CryptoCertificatekeypairsUpdate(params *CryptoCertificatekeypairsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*CryptoCertificatekeypairsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCryptoCertificatekeypairsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "crypto_certificatekeypairs_update",
		Method:             "PUT",
		PathPattern:        "/crypto/certificatekeypairs/{kp_uuid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CryptoCertificatekeypairsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CryptoCertificatekeypairsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for crypto_certificatekeypairs_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
