// Code generated by go-swagger; DO NOT EDIT.

package crypto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/BeryJu/passbook/proxy/pkg/models"
)

// CryptoCertificatekeypairsReadReader is a Reader for the CryptoCertificatekeypairsRead structure.
type CryptoCertificatekeypairsReadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CryptoCertificatekeypairsReadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCryptoCertificatekeypairsReadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCryptoCertificatekeypairsReadOK creates a CryptoCertificatekeypairsReadOK with default headers values
func NewCryptoCertificatekeypairsReadOK() *CryptoCertificatekeypairsReadOK {
	return &CryptoCertificatekeypairsReadOK{}
}

/*CryptoCertificatekeypairsReadOK handles this case with default header values.

CryptoCertificatekeypairsReadOK crypto certificatekeypairs read o k
*/
type CryptoCertificatekeypairsReadOK struct {
	Payload *models.CertificateKeyPair
}

func (o *CryptoCertificatekeypairsReadOK) Error() string {
	return fmt.Sprintf("[GET /crypto/certificatekeypairs/{kp_uuid}/][%d] cryptoCertificatekeypairsReadOK  %+v", 200, o.Payload)
}

func (o *CryptoCertificatekeypairsReadOK) GetPayload() *models.CertificateKeyPair {
	return o.Payload
}

func (o *CryptoCertificatekeypairsReadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateKeyPair)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
