// Code generated by go-swagger; DO NOT EDIT.

package crypto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCryptoCertificatekeypairsDeleteParams creates a new CryptoCertificatekeypairsDeleteParams object
// with the default values initialized.
func NewCryptoCertificatekeypairsDeleteParams() *CryptoCertificatekeypairsDeleteParams {
	var ()
	return &CryptoCertificatekeypairsDeleteParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCryptoCertificatekeypairsDeleteParamsWithTimeout creates a new CryptoCertificatekeypairsDeleteParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCryptoCertificatekeypairsDeleteParamsWithTimeout(timeout time.Duration) *CryptoCertificatekeypairsDeleteParams {
	var ()
	return &CryptoCertificatekeypairsDeleteParams{

		timeout: timeout,
	}
}

// NewCryptoCertificatekeypairsDeleteParamsWithContext creates a new CryptoCertificatekeypairsDeleteParams object
// with the default values initialized, and the ability to set a context for a request
func NewCryptoCertificatekeypairsDeleteParamsWithContext(ctx context.Context) *CryptoCertificatekeypairsDeleteParams {
	var ()
	return &CryptoCertificatekeypairsDeleteParams{

		Context: ctx,
	}
}

// NewCryptoCertificatekeypairsDeleteParamsWithHTTPClient creates a new CryptoCertificatekeypairsDeleteParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCryptoCertificatekeypairsDeleteParamsWithHTTPClient(client *http.Client) *CryptoCertificatekeypairsDeleteParams {
	var ()
	return &CryptoCertificatekeypairsDeleteParams{
		HTTPClient: client,
	}
}

/*CryptoCertificatekeypairsDeleteParams contains all the parameters to send to the API endpoint
for the crypto certificatekeypairs delete operation typically these are written to a http.Request
*/
type CryptoCertificatekeypairsDeleteParams struct {

	/*KpUUID
	  A UUID string identifying this Certificate-Key Pair.

	*/
	KpUUID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the crypto certificatekeypairs delete params
func (o *CryptoCertificatekeypairsDeleteParams) WithTimeout(timeout time.Duration) *CryptoCertificatekeypairsDeleteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the crypto certificatekeypairs delete params
func (o *CryptoCertificatekeypairsDeleteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the crypto certificatekeypairs delete params
func (o *CryptoCertificatekeypairsDeleteParams) WithContext(ctx context.Context) *CryptoCertificatekeypairsDeleteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the crypto certificatekeypairs delete params
func (o *CryptoCertificatekeypairsDeleteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the crypto certificatekeypairs delete params
func (o *CryptoCertificatekeypairsDeleteParams) WithHTTPClient(client *http.Client) *CryptoCertificatekeypairsDeleteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the crypto certificatekeypairs delete params
func (o *CryptoCertificatekeypairsDeleteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithKpUUID adds the kpUUID to the crypto certificatekeypairs delete params
func (o *CryptoCertificatekeypairsDeleteParams) WithKpUUID(kpUUID strfmt.UUID) *CryptoCertificatekeypairsDeleteParams {
	o.SetKpUUID(kpUUID)
	return o
}

// SetKpUUID adds the kpUuid to the crypto certificatekeypairs delete params
func (o *CryptoCertificatekeypairsDeleteParams) SetKpUUID(kpUUID strfmt.UUID) {
	o.KpUUID = kpUUID
}

// WriteToRequest writes these params to a swagger request
func (o *CryptoCertificatekeypairsDeleteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param kp_uuid
	if err := r.SetPathParam("kp_uuid", o.KpUUID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
