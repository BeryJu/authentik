// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProxyProvider proxy provider
//
// swagger:model ProxyProvider
type ProxyProvider struct {

	// Certificate
	// Format: uuid
	Certificate *strfmt.UUID `json:"certificate,omitempty"`

	// Client ID
	// Max Length: 255
	// Min Length: 1
	ClientID string `json:"client_id,omitempty"`

	// Client Secret
	// Max Length: 255
	ClientSecret string `json:"client_secret,omitempty"`

	// Cookie secret
	// Min Length: 1
	CookieSecret string `json:"cookie_secret,omitempty"`

	// External host
	// Required: true
	// Min Length: 1
	ExternalHost *string `json:"external_host"`

	// Internal host
	// Required: true
	// Min Length: 1
	InternalHost *string `json:"internal_host"`

	// Name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// oidc configuration
	OidcConfiguration *OIDCConfiguration `json:"oidc_configuration,omitempty"`

	// ID
	// Read Only: true
	Pk int64 `json:"pk,omitempty"`
}

// Validate validates this proxy provider
func (m *ProxyProvider) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCookieSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternalHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOidcConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProxyProvider) validateCertificate(formats strfmt.Registry) error {

	if swag.IsZero(m.Certificate) { // not required
		return nil
	}

	if err := validate.FormatOf("certificate", "body", "uuid", m.Certificate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProxyProvider) validateClientID(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientID) { // not required
		return nil
	}

	if err := validate.MinLength("client_id", "body", string(m.ClientID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("client_id", "body", string(m.ClientID), 255); err != nil {
		return err
	}

	return nil
}

func (m *ProxyProvider) validateClientSecret(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientSecret) { // not required
		return nil
	}

	if err := validate.MaxLength("client_secret", "body", string(m.ClientSecret), 255); err != nil {
		return err
	}

	return nil
}

func (m *ProxyProvider) validateCookieSecret(formats strfmt.Registry) error {

	if swag.IsZero(m.CookieSecret) { // not required
		return nil
	}

	if err := validate.MinLength("cookie_secret", "body", string(m.CookieSecret), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProxyProvider) validateExternalHost(formats strfmt.Registry) error {

	if err := validate.Required("external_host", "body", m.ExternalHost); err != nil {
		return err
	}

	if err := validate.MinLength("external_host", "body", string(*m.ExternalHost), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProxyProvider) validateInternalHost(formats strfmt.Registry) error {

	if err := validate.Required("internal_host", "body", m.InternalHost); err != nil {
		return err
	}

	if err := validate.MinLength("internal_host", "body", string(*m.InternalHost), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProxyProvider) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProxyProvider) validateOidcConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.OidcConfiguration) { // not required
		return nil
	}

	if m.OidcConfiguration != nil {
		if err := m.OidcConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidc_configuration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProxyProvider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProxyProvider) UnmarshalBinary(b []byte) error {
	var res ProxyProvider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
