// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DummyPolicy dummy policy
//
// swagger:model DummyPolicy
type DummyPolicy struct {

	// Name
	Name *string `json:"name,omitempty"`

	// Policy uuid
	// Read Only: true
	// Format: uuid
	Pk strfmt.UUID `json:"pk,omitempty"`

	// Result
	Result bool `json:"result,omitempty"`

	// Wait max
	// Maximum: 2.147483647e+09
	// Minimum: -2.147483648e+09
	WaitMax *int64 `json:"wait_max,omitempty"`

	// Wait min
	// Maximum: 2.147483647e+09
	// Minimum: -2.147483648e+09
	WaitMin *int64 `json:"wait_min,omitempty"`
}

// Validate validates this dummy policy
func (m *DummyPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaitMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaitMin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DummyPolicy) validatePk(formats strfmt.Registry) error {

	if swag.IsZero(m.Pk) { // not required
		return nil
	}

	if err := validate.FormatOf("pk", "body", "uuid", m.Pk.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DummyPolicy) validateWaitMax(formats strfmt.Registry) error {

	if swag.IsZero(m.WaitMax) { // not required
		return nil
	}

	if err := validate.MinimumInt("wait_max", "body", int64(*m.WaitMax), -2.147483648e+09, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("wait_max", "body", int64(*m.WaitMax), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *DummyPolicy) validateWaitMin(formats strfmt.Registry) error {

	if swag.IsZero(m.WaitMin) { // not required
		return nil
	}

	if err := validate.MinimumInt("wait_min", "body", int64(*m.WaitMin), -2.147483648e+09, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("wait_min", "body", int64(*m.WaitMin), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DummyPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DummyPolicy) UnmarshalBinary(b []byte) error {
	var res DummyPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
