// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenIDConnectConfiguration Oidc configuration
//
// Embed OpenID Connect provider information
//
// swagger:model OpenIDConnectConfiguration
type OpenIDConnectConfiguration struct {

	// Authorization endpoint
	// Required: true
	// Min Length: 1
	AuthorizationEndpoint *string `json:"authorization_endpoint"`

	// End session endpoint
	// Required: true
	// Min Length: 1
	EndSessionEndpoint *string `json:"end_session_endpoint"`

	// id token signing alg values supported
	// Required: true
	IDTokenSigningAlgValuesSupported []string `json:"id_token_signing_alg_values_supported"`

	// Introspection endpoint
	// Required: true
	// Min Length: 1
	IntrospectionEndpoint *string `json:"introspection_endpoint"`

	// Issuer
	// Required: true
	// Min Length: 1
	Issuer *string `json:"issuer"`

	// Jwks uri
	// Required: true
	// Min Length: 1
	JwksURI *string `json:"jwks_uri"`

	// response types supported
	// Required: true
	ResponseTypesSupported []string `json:"response_types_supported"`

	// subject types supported
	// Required: true
	SubjectTypesSupported []string `json:"subject_types_supported"`

	// Token endpoint
	// Required: true
	// Min Length: 1
	TokenEndpoint *string `json:"token_endpoint"`

	// token endpoint auth methods supported
	// Required: true
	TokenEndpointAuthMethodsSupported []string `json:"token_endpoint_auth_methods_supported"`

	// Userinfo endpoint
	// Required: true
	// Min Length: 1
	UserinfoEndpoint *string `json:"userinfo_endpoint"`
}

// Validate validates this open ID connect configuration
func (m *OpenIDConnectConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorizationEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndSessionEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDTokenSigningAlgValuesSupported(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntrospectionEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJwksURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseTypesSupported(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectTypesSupported(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenEndpointAuthMethodsSupported(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserinfoEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenIDConnectConfiguration) validateAuthorizationEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("authorization_endpoint", "body", m.AuthorizationEndpoint); err != nil {
		return err
	}

	if err := validate.MinLength("authorization_endpoint", "body", string(*m.AuthorizationEndpoint), 1); err != nil {
		return err
	}

	return nil
}

func (m *OpenIDConnectConfiguration) validateEndSessionEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("end_session_endpoint", "body", m.EndSessionEndpoint); err != nil {
		return err
	}

	if err := validate.MinLength("end_session_endpoint", "body", string(*m.EndSessionEndpoint), 1); err != nil {
		return err
	}

	return nil
}

func (m *OpenIDConnectConfiguration) validateIDTokenSigningAlgValuesSupported(formats strfmt.Registry) error {

	if err := validate.Required("id_token_signing_alg_values_supported", "body", m.IDTokenSigningAlgValuesSupported); err != nil {
		return err
	}

	for i := 0; i < len(m.IDTokenSigningAlgValuesSupported); i++ {

		if err := validate.MinLength("id_token_signing_alg_values_supported"+"."+strconv.Itoa(i), "body", string(m.IDTokenSigningAlgValuesSupported[i]), 1); err != nil {
			return err
		}

	}

	return nil
}

func (m *OpenIDConnectConfiguration) validateIntrospectionEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("introspection_endpoint", "body", m.IntrospectionEndpoint); err != nil {
		return err
	}

	if err := validate.MinLength("introspection_endpoint", "body", string(*m.IntrospectionEndpoint), 1); err != nil {
		return err
	}

	return nil
}

func (m *OpenIDConnectConfiguration) validateIssuer(formats strfmt.Registry) error {

	if err := validate.Required("issuer", "body", m.Issuer); err != nil {
		return err
	}

	if err := validate.MinLength("issuer", "body", string(*m.Issuer), 1); err != nil {
		return err
	}

	return nil
}

func (m *OpenIDConnectConfiguration) validateJwksURI(formats strfmt.Registry) error {

	if err := validate.Required("jwks_uri", "body", m.JwksURI); err != nil {
		return err
	}

	if err := validate.MinLength("jwks_uri", "body", string(*m.JwksURI), 1); err != nil {
		return err
	}

	return nil
}

func (m *OpenIDConnectConfiguration) validateResponseTypesSupported(formats strfmt.Registry) error {

	if err := validate.Required("response_types_supported", "body", m.ResponseTypesSupported); err != nil {
		return err
	}

	for i := 0; i < len(m.ResponseTypesSupported); i++ {

		if err := validate.MinLength("response_types_supported"+"."+strconv.Itoa(i), "body", string(m.ResponseTypesSupported[i]), 1); err != nil {
			return err
		}

	}

	return nil
}

func (m *OpenIDConnectConfiguration) validateSubjectTypesSupported(formats strfmt.Registry) error {

	if err := validate.Required("subject_types_supported", "body", m.SubjectTypesSupported); err != nil {
		return err
	}

	for i := 0; i < len(m.SubjectTypesSupported); i++ {

		if err := validate.MinLength("subject_types_supported"+"."+strconv.Itoa(i), "body", string(m.SubjectTypesSupported[i]), 1); err != nil {
			return err
		}

	}

	return nil
}

func (m *OpenIDConnectConfiguration) validateTokenEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("token_endpoint", "body", m.TokenEndpoint); err != nil {
		return err
	}

	if err := validate.MinLength("token_endpoint", "body", string(*m.TokenEndpoint), 1); err != nil {
		return err
	}

	return nil
}

func (m *OpenIDConnectConfiguration) validateTokenEndpointAuthMethodsSupported(formats strfmt.Registry) error {

	if err := validate.Required("token_endpoint_auth_methods_supported", "body", m.TokenEndpointAuthMethodsSupported); err != nil {
		return err
	}

	for i := 0; i < len(m.TokenEndpointAuthMethodsSupported); i++ {

		if err := validate.MinLength("token_endpoint_auth_methods_supported"+"."+strconv.Itoa(i), "body", string(m.TokenEndpointAuthMethodsSupported[i]), 1); err != nil {
			return err
		}

	}

	return nil
}

func (m *OpenIDConnectConfiguration) validateUserinfoEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("userinfo_endpoint", "body", m.UserinfoEndpoint); err != nil {
		return err
	}

	if err := validate.MinLength("userinfo_endpoint", "body", string(*m.UserinfoEndpoint), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenIDConnectConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenIDConnectConfiguration) UnmarshalBinary(b []byte) error {
	var res OpenIDConnectConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
