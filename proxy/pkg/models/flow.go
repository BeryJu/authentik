// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Flow flow
//
// swagger:model Flow
type Flow struct {

	// Designation
	// Required: true
	// Enum: [authentication authorization invalidation enrollment unenrollment recovery stage_setup]
	Designation *string `json:"designation"`

	// Name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// Flow uuid
	// Read Only: true
	// Format: uuid
	Pk strfmt.UUID `json:"pk,omitempty"`

	// policies
	// Read Only: true
	// Unique: true
	Policies []strfmt.UUID `json:"policies"`

	// Slug
	// Required: true
	// Max Length: 50
	// Min Length: 1
	// Pattern: ^[-a-zA-Z0-9_]+$
	Slug *string `json:"slug"`

	// stages
	// Read Only: true
	// Unique: true
	Stages []strfmt.UUID `json:"stages"`
}

// Validate validates this flow
func (m *Flow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDesignation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var flowTypeDesignationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["authentication","authorization","invalidation","enrollment","unenrollment","recovery","stage_setup"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		flowTypeDesignationPropEnum = append(flowTypeDesignationPropEnum, v)
	}
}

const (

	// FlowDesignationAuthentication captures enum value "authentication"
	FlowDesignationAuthentication string = "authentication"

	// FlowDesignationAuthorization captures enum value "authorization"
	FlowDesignationAuthorization string = "authorization"

	// FlowDesignationInvalidation captures enum value "invalidation"
	FlowDesignationInvalidation string = "invalidation"

	// FlowDesignationEnrollment captures enum value "enrollment"
	FlowDesignationEnrollment string = "enrollment"

	// FlowDesignationUnenrollment captures enum value "unenrollment"
	FlowDesignationUnenrollment string = "unenrollment"

	// FlowDesignationRecovery captures enum value "recovery"
	FlowDesignationRecovery string = "recovery"

	// FlowDesignationStageSetup captures enum value "stage_setup"
	FlowDesignationStageSetup string = "stage_setup"
)

// prop value enum
func (m *Flow) validateDesignationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, flowTypeDesignationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Flow) validateDesignation(formats strfmt.Registry) error {

	if err := validate.Required("designation", "body", m.Designation); err != nil {
		return err
	}

	// value enum
	if err := m.validateDesignationEnum("designation", "body", *m.Designation); err != nil {
		return err
	}

	return nil
}

func (m *Flow) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *Flow) validatePk(formats strfmt.Registry) error {

	if swag.IsZero(m.Pk) { // not required
		return nil
	}

	if err := validate.FormatOf("pk", "body", "uuid", m.Pk.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Flow) validatePolicies(formats strfmt.Registry) error {

	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	if err := validate.UniqueItems("policies", "body", m.Policies); err != nil {
		return err
	}

	for i := 0; i < len(m.Policies); i++ {

		if err := validate.FormatOf("policies"+"."+strconv.Itoa(i), "body", "uuid", m.Policies[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *Flow) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("slug", "body", m.Slug); err != nil {
		return err
	}

	if err := validate.MinLength("slug", "body", string(*m.Slug), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("slug", "body", string(*m.Slug), 50); err != nil {
		return err
	}

	if err := validate.Pattern("slug", "body", string(*m.Slug), `^[-a-zA-Z0-9_]+$`); err != nil {
		return err
	}

	return nil
}

func (m *Flow) validateStages(formats strfmt.Registry) error {

	if swag.IsZero(m.Stages) { // not required
		return nil
	}

	if err := validate.UniqueItems("stages", "body", m.Stages); err != nil {
		return err
	}

	for i := 0; i < len(m.Stages); i++ {

		if err := validate.FormatOf("stages"+"."+strconv.Itoa(i), "body", "uuid", m.Stages[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Flow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Flow) UnmarshalBinary(b []byte) error {
	var res Flow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
