// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PromptStage prompt stage
//
// swagger:model PromptStage
type PromptStage struct {

	// fields
	// Required: true
	// Unique: true
	Fields []strfmt.UUID `json:"fields"`

	// Name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// Pbm uuid
	// Read Only: true
	// Format: uuid
	Pk strfmt.UUID `json:"pk,omitempty"`
}

// Validate validates this prompt stage
func (m *PromptStage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePk(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PromptStage) validateFields(formats strfmt.Registry) error {

	if err := validate.Required("fields", "body", m.Fields); err != nil {
		return err
	}

	if err := validate.UniqueItems("fields", "body", m.Fields); err != nil {
		return err
	}

	for i := 0; i < len(m.Fields); i++ {

		if err := validate.FormatOf("fields"+"."+strconv.Itoa(i), "body", "uuid", m.Fields[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *PromptStage) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *PromptStage) validatePk(formats strfmt.Registry) error {

	if swag.IsZero(m.Pk) { // not required
		return nil
	}

	if err := validate.FormatOf("pk", "body", "uuid", m.Pk.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PromptStage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PromptStage) UnmarshalBinary(b []byte) error {
	var res PromptStage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
