// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EmailStage email stage
//
// swagger:model EmailStage
type EmailStage struct {

	// From address
	// Max Length: 254
	// Min Length: 1
	// Format: email
	FromAddress strfmt.Email `json:"from_address,omitempty"`

	// Host
	// Min Length: 1
	Host string `json:"host,omitempty"`

	// Name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// Password
	Password string `json:"password,omitempty"`

	// Stage uuid
	// Read Only: true
	// Format: uuid
	Pk strfmt.UUID `json:"pk,omitempty"`

	// Port
	// Maximum: 2.147483647e+09
	// Minimum: -2.147483648e+09
	Port *int64 `json:"port,omitempty"`

	// Subject
	// Min Length: 1
	Subject string `json:"subject,omitempty"`

	// Template
	// Enum: [stages/email/for_email/password_reset.html stages/email/for_email/account_confirmation.html]
	Template string `json:"template,omitempty"`

	// Timeout
	// Maximum: 2.147483647e+09
	// Minimum: -2.147483648e+09
	Timeout *int64 `json:"timeout,omitempty"`

	// Token expiry
	//
	// Time in minutes the token sent is valid.
	// Maximum: 2.147483647e+09
	// Minimum: -2.147483648e+09
	TokenExpiry *int64 `json:"token_expiry,omitempty"`

	// Use ssl
	UseSsl bool `json:"use_ssl,omitempty"`

	// Use tls
	UseTLS bool `json:"use_tls,omitempty"`

	// Username
	Username string `json:"username,omitempty"`
}

// Validate validates this email stage
func (m *EmailStage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFromAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenExpiry(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmailStage) validateFromAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.FromAddress) { // not required
		return nil
	}

	if err := validate.MinLength("from_address", "body", string(m.FromAddress), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("from_address", "body", string(m.FromAddress), 254); err != nil {
		return err
	}

	if err := validate.FormatOf("from_address", "body", "email", m.FromAddress.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EmailStage) validateHost(formats strfmt.Registry) error {

	if swag.IsZero(m.Host) { // not required
		return nil
	}

	if err := validate.MinLength("host", "body", string(m.Host), 1); err != nil {
		return err
	}

	return nil
}

func (m *EmailStage) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *EmailStage) validatePk(formats strfmt.Registry) error {

	if swag.IsZero(m.Pk) { // not required
		return nil
	}

	if err := validate.FormatOf("pk", "body", "uuid", m.Pk.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EmailStage) validatePort(formats strfmt.Registry) error {

	if swag.IsZero(m.Port) { // not required
		return nil
	}

	if err := validate.MinimumInt("port", "body", int64(*m.Port), -2.147483648e+09, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", int64(*m.Port), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *EmailStage) validateSubject(formats strfmt.Registry) error {

	if swag.IsZero(m.Subject) { // not required
		return nil
	}

	if err := validate.MinLength("subject", "body", string(m.Subject), 1); err != nil {
		return err
	}

	return nil
}

var emailStageTypeTemplatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["stages/email/for_email/password_reset.html","stages/email/for_email/account_confirmation.html"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		emailStageTypeTemplatePropEnum = append(emailStageTypeTemplatePropEnum, v)
	}
}

const (

	// EmailStageTemplateStagesEmailForEmailPasswordResetHTML captures enum value "stages/email/for_email/password_reset.html"
	EmailStageTemplateStagesEmailForEmailPasswordResetHTML string = "stages/email/for_email/password_reset.html"

	// EmailStageTemplateStagesEmailForEmailAccountConfirmationHTML captures enum value "stages/email/for_email/account_confirmation.html"
	EmailStageTemplateStagesEmailForEmailAccountConfirmationHTML string = "stages/email/for_email/account_confirmation.html"
)

// prop value enum
func (m *EmailStage) validateTemplateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, emailStageTypeTemplatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EmailStage) validateTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.Template) { // not required
		return nil
	}

	// value enum
	if err := m.validateTemplateEnum("template", "body", m.Template); err != nil {
		return err
	}

	return nil
}

func (m *EmailStage) validateTimeout(formats strfmt.Registry) error {

	if swag.IsZero(m.Timeout) { // not required
		return nil
	}

	if err := validate.MinimumInt("timeout", "body", int64(*m.Timeout), -2.147483648e+09, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("timeout", "body", int64(*m.Timeout), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *EmailStage) validateTokenExpiry(formats strfmt.Registry) error {

	if swag.IsZero(m.TokenExpiry) { // not required
		return nil
	}

	if err := validate.MinimumInt("token_expiry", "body", int64(*m.TokenExpiry), -2.147483648e+09, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("token_expiry", "body", int64(*m.TokenExpiry), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EmailStage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmailStage) UnmarshalBinary(b []byte) error {
	var res EmailStage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
