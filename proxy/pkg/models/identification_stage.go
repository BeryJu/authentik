// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IdentificationStage identification stage
//
// swagger:model IdentificationStage
type IdentificationStage struct {

	// Enrollment flow
	//
	// Optional enrollment flow, which is linked at the bottom of the page.
	// Format: uuid
	EnrollmentFlow *strfmt.UUID `json:"enrollment_flow,omitempty"`

	// Name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// Stage uuid
	// Read Only: true
	// Format: uuid
	Pk strfmt.UUID `json:"pk,omitempty"`

	// Recovery flow
	//
	// Optional recovery flow, which is linked at the bottom of the page.
	// Format: uuid
	RecoveryFlow *strfmt.UUID `json:"recovery_flow,omitempty"`

	// Template
	// Required: true
	// Enum: [stages/identification/login.html stages/identification/recovery.html]
	Template *string `json:"template"`

	// Fields of the user object to match against.
	// Required: true
	UserFields []string `json:"user_fields"`
}

// Validate validates this identification stage
func (m *IdentificationStage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnrollmentFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoveryFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdentificationStage) validateEnrollmentFlow(formats strfmt.Registry) error {

	if swag.IsZero(m.EnrollmentFlow) { // not required
		return nil
	}

	if err := validate.FormatOf("enrollment_flow", "body", "uuid", m.EnrollmentFlow.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IdentificationStage) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *IdentificationStage) validatePk(formats strfmt.Registry) error {

	if swag.IsZero(m.Pk) { // not required
		return nil
	}

	if err := validate.FormatOf("pk", "body", "uuid", m.Pk.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IdentificationStage) validateRecoveryFlow(formats strfmt.Registry) error {

	if swag.IsZero(m.RecoveryFlow) { // not required
		return nil
	}

	if err := validate.FormatOf("recovery_flow", "body", "uuid", m.RecoveryFlow.String(), formats); err != nil {
		return err
	}

	return nil
}

var identificationStageTypeTemplatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["stages/identification/login.html","stages/identification/recovery.html"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		identificationStageTypeTemplatePropEnum = append(identificationStageTypeTemplatePropEnum, v)
	}
}

const (

	// IdentificationStageTemplateStagesIdentificationLoginHTML captures enum value "stages/identification/login.html"
	IdentificationStageTemplateStagesIdentificationLoginHTML string = "stages/identification/login.html"

	// IdentificationStageTemplateStagesIdentificationRecoveryHTML captures enum value "stages/identification/recovery.html"
	IdentificationStageTemplateStagesIdentificationRecoveryHTML string = "stages/identification/recovery.html"
)

// prop value enum
func (m *IdentificationStage) validateTemplateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, identificationStageTypeTemplatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IdentificationStage) validateTemplate(formats strfmt.Registry) error {

	if err := validate.Required("template", "body", m.Template); err != nil {
		return err
	}

	// value enum
	if err := m.validateTemplateEnum("template", "body", *m.Template); err != nil {
		return err
	}

	return nil
}

var identificationStageUserFieldsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["email","username"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		identificationStageUserFieldsItemsEnum = append(identificationStageUserFieldsItemsEnum, v)
	}
}

func (m *IdentificationStage) validateUserFieldsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, identificationStageUserFieldsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IdentificationStage) validateUserFields(formats strfmt.Registry) error {

	if err := validate.Required("user_fields", "body", m.UserFields); err != nil {
		return err
	}

	for i := 0; i < len(m.UserFields); i++ {

		// value enum
		if err := m.validateUserFieldsItemsEnum("user_fields"+"."+strconv.Itoa(i), "body", m.UserFields[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IdentificationStage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IdentificationStage) UnmarshalBinary(b []byte) error {
	var res IdentificationStage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
