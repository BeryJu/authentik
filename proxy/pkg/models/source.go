// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Source source
//
// swagger:model Source
type Source struct {

	// type
	// Read Only: true
	Type string `json:"__type__,omitempty"`

	// Authentication flow
	//
	// Flow to use when authenticating existing users.
	// Format: uuid
	AuthenticationFlow *strfmt.UUID `json:"authentication_flow,omitempty"`

	// Enabled
	Enabled bool `json:"enabled,omitempty"`

	// Enrollment flow
	//
	// Flow to use when enrolling new users.
	// Format: uuid
	EnrollmentFlow *strfmt.UUID `json:"enrollment_flow,omitempty"`

	// Name
	//
	// Source's display Name.
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// Pbm uuid
	// Read Only: true
	// Format: uuid
	Pk strfmt.UUID `json:"pk,omitempty"`

	// Slug
	//
	// Internal source name, used in URLs.
	// Required: true
	// Max Length: 50
	// Min Length: 1
	// Pattern: ^[-a-zA-Z0-9_]+$
	Slug *string `json:"slug"`
}

// Validate validates this source
func (m *Source) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnrollmentFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Source) validateAuthenticationFlow(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthenticationFlow) { // not required
		return nil
	}

	if err := validate.FormatOf("authentication_flow", "body", "uuid", m.AuthenticationFlow.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Source) validateEnrollmentFlow(formats strfmt.Registry) error {

	if swag.IsZero(m.EnrollmentFlow) { // not required
		return nil
	}

	if err := validate.FormatOf("enrollment_flow", "body", "uuid", m.EnrollmentFlow.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Source) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *Source) validatePk(formats strfmt.Registry) error {

	if swag.IsZero(m.Pk) { // not required
		return nil
	}

	if err := validate.FormatOf("pk", "body", "uuid", m.Pk.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Source) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("slug", "body", m.Slug); err != nil {
		return err
	}

	if err := validate.MinLength("slug", "body", string(*m.Slug), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("slug", "body", string(*m.Slug), 50); err != nil {
		return err
	}

	if err := validate.Pattern("slug", "body", string(*m.Slug), `^[-a-zA-Z0-9_]+$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Source) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Source) UnmarshalBinary(b []byte) error {
	var res Source
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
