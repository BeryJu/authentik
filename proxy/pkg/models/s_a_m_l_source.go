// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SAMLSource s a m l source
//
// swagger:model SAMLSource
type SAMLSource struct {

	// Authentication flow
	//
	// Flow to use when authenticating existing users.
	// Format: uuid
	AuthenticationFlow *strfmt.UUID `json:"authentication_flow,omitempty"`

	// Binding type
	// Enum: [REDIRECT POST POST_AUTO]
	BindingType string `json:"binding_type,omitempty"`

	// Enabled
	Enabled bool `json:"enabled,omitempty"`

	// Enrollment flow
	//
	// Flow to use when enrolling new users.
	// Format: uuid
	EnrollmentFlow *strfmt.UUID `json:"enrollment_flow,omitempty"`

	// Issuer
	//
	// Also known as Entity ID. Defaults the Metadata URL.
	Issuer string `json:"issuer,omitempty"`

	// Name
	//
	// Source's display Name.
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// Name id policy
	//
	// NameID Policy sent to the IdP. Can be unset, in which case no Policy is sent.
	// Enum: [urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress urn:oasis:names:tc:SAML:2.0:nameid-format:persistent urn:oasis:names:tc:SAML:2.0:nameid-format:X509SubjectName urn:oasis:names:tc:SAML:2.0:nameid-format:WindowsDomainQualifiedName urn:oasis:names:tc:SAML:2.0:nameid-format:transient]
	NameIDPolicy string `json:"name_id_policy,omitempty"`

	// Singing Keypair
	//
	// Certificate Key Pair of the IdP which Assertion's Signature is validated against.
	// Required: true
	// Format: uuid
	SigningKp *strfmt.UUID `json:"signing_kp"`

	// SLO URL
	//
	// Optional URL if your IDP supports Single-Logout.
	// Max Length: 200
	// Format: uri
	SloURL *strfmt.URI `json:"slo_url,omitempty"`

	// Slug
	//
	// Internal source name, used in URLs.
	// Required: true
	// Max Length: 50
	// Min Length: 1
	// Pattern: ^[-a-zA-Z0-9_]+$
	Slug *string `json:"slug"`

	// SSO URL
	//
	// URL that the initial Login request is sent to.
	// Required: true
	// Max Length: 200
	// Min Length: 1
	// Format: uri
	SsoURL *strfmt.URI `json:"sso_url"`

	// Delete temporary users after
	//
	// Time offset when temporary users should be deleted. This only applies if your IDP uses the NameID Format 'transient', and the user doesn't log out manually. (Format: hours=1;minutes=2;seconds=3).
	// Min Length: 1
	TemporaryUserDeleteAfter string `json:"temporary_user_delete_after,omitempty"`
}

// Validate validates this s a m l source
func (m *SAMLSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBindingType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnrollmentFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameIDPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSigningKp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSloURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSsoURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemporaryUserDeleteAfter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SAMLSource) validateAuthenticationFlow(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthenticationFlow) { // not required
		return nil
	}

	if err := validate.FormatOf("authentication_flow", "body", "uuid", m.AuthenticationFlow.String(), formats); err != nil {
		return err
	}

	return nil
}

var sAMLSourceTypeBindingTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REDIRECT","POST","POST_AUTO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sAMLSourceTypeBindingTypePropEnum = append(sAMLSourceTypeBindingTypePropEnum, v)
	}
}

const (

	// SAMLSourceBindingTypeREDIRECT captures enum value "REDIRECT"
	SAMLSourceBindingTypeREDIRECT string = "REDIRECT"

	// SAMLSourceBindingTypePOST captures enum value "POST"
	SAMLSourceBindingTypePOST string = "POST"

	// SAMLSourceBindingTypePOSTAUTO captures enum value "POST_AUTO"
	SAMLSourceBindingTypePOSTAUTO string = "POST_AUTO"
)

// prop value enum
func (m *SAMLSource) validateBindingTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sAMLSourceTypeBindingTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SAMLSource) validateBindingType(formats strfmt.Registry) error {

	if swag.IsZero(m.BindingType) { // not required
		return nil
	}

	// value enum
	if err := m.validateBindingTypeEnum("binding_type", "body", m.BindingType); err != nil {
		return err
	}

	return nil
}

func (m *SAMLSource) validateEnrollmentFlow(formats strfmt.Registry) error {

	if swag.IsZero(m.EnrollmentFlow) { // not required
		return nil
	}

	if err := validate.FormatOf("enrollment_flow", "body", "uuid", m.EnrollmentFlow.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SAMLSource) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

var sAMLSourceTypeNameIDPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress","urn:oasis:names:tc:SAML:2.0:nameid-format:persistent","urn:oasis:names:tc:SAML:2.0:nameid-format:X509SubjectName","urn:oasis:names:tc:SAML:2.0:nameid-format:WindowsDomainQualifiedName","urn:oasis:names:tc:SAML:2.0:nameid-format:transient"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sAMLSourceTypeNameIDPolicyPropEnum = append(sAMLSourceTypeNameIDPolicyPropEnum, v)
	}
}

const (

	// SAMLSourceNameIDPolicyUrnOasisNamesTcSAML11NameidFormatEmailAddress captures enum value "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"
	SAMLSourceNameIDPolicyUrnOasisNamesTcSAML11NameidFormatEmailAddress string = "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"

	// SAMLSourceNameIDPolicyUrnOasisNamesTcSAML20NameidFormatPersistent captures enum value "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent"
	SAMLSourceNameIDPolicyUrnOasisNamesTcSAML20NameidFormatPersistent string = "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent"

	// SAMLSourceNameIDPolicyUrnOasisNamesTcSAML20NameidFormatX509SubjectName captures enum value "urn:oasis:names:tc:SAML:2.0:nameid-format:X509SubjectName"
	SAMLSourceNameIDPolicyUrnOasisNamesTcSAML20NameidFormatX509SubjectName string = "urn:oasis:names:tc:SAML:2.0:nameid-format:X509SubjectName"

	// SAMLSourceNameIDPolicyUrnOasisNamesTcSAML20NameidFormatWindowsDomainQualifiedName captures enum value "urn:oasis:names:tc:SAML:2.0:nameid-format:WindowsDomainQualifiedName"
	SAMLSourceNameIDPolicyUrnOasisNamesTcSAML20NameidFormatWindowsDomainQualifiedName string = "urn:oasis:names:tc:SAML:2.0:nameid-format:WindowsDomainQualifiedName"

	// SAMLSourceNameIDPolicyUrnOasisNamesTcSAML20NameidFormatTransient captures enum value "urn:oasis:names:tc:SAML:2.0:nameid-format:transient"
	SAMLSourceNameIDPolicyUrnOasisNamesTcSAML20NameidFormatTransient string = "urn:oasis:names:tc:SAML:2.0:nameid-format:transient"
)

// prop value enum
func (m *SAMLSource) validateNameIDPolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sAMLSourceTypeNameIDPolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SAMLSource) validateNameIDPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.NameIDPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameIDPolicyEnum("name_id_policy", "body", m.NameIDPolicy); err != nil {
		return err
	}

	return nil
}

func (m *SAMLSource) validateSigningKp(formats strfmt.Registry) error {

	if err := validate.Required("signing_kp", "body", m.SigningKp); err != nil {
		return err
	}

	if err := validate.FormatOf("signing_kp", "body", "uuid", m.SigningKp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SAMLSource) validateSloURL(formats strfmt.Registry) error {

	if swag.IsZero(m.SloURL) { // not required
		return nil
	}

	if err := validate.MaxLength("slo_url", "body", string(*m.SloURL), 200); err != nil {
		return err
	}

	if err := validate.FormatOf("slo_url", "body", "uri", m.SloURL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SAMLSource) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("slug", "body", m.Slug); err != nil {
		return err
	}

	if err := validate.MinLength("slug", "body", string(*m.Slug), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("slug", "body", string(*m.Slug), 50); err != nil {
		return err
	}

	if err := validate.Pattern("slug", "body", string(*m.Slug), `^[-a-zA-Z0-9_]+$`); err != nil {
		return err
	}

	return nil
}

func (m *SAMLSource) validateSsoURL(formats strfmt.Registry) error {

	if err := validate.Required("sso_url", "body", m.SsoURL); err != nil {
		return err
	}

	if err := validate.MinLength("sso_url", "body", string(*m.SsoURL), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("sso_url", "body", string(*m.SsoURL), 200); err != nil {
		return err
	}

	if err := validate.FormatOf("sso_url", "body", "uri", m.SsoURL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SAMLSource) validateTemporaryUserDeleteAfter(formats strfmt.Registry) error {

	if swag.IsZero(m.TemporaryUserDeleteAfter) { // not required
		return nil
	}

	if err := validate.MinLength("temporary_user_delete_after", "body", string(m.TemporaryUserDeleteAfter), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SAMLSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SAMLSource) UnmarshalBinary(b []byte) error {
	var res SAMLSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
