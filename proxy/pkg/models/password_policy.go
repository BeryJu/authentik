// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PasswordPolicy password policy
//
// swagger:model PasswordPolicy
type PasswordPolicy struct {

	// Amount lowercase
	// Maximum: 2.147483647e+09
	// Minimum: -2.147483648e+09
	AmountLowercase *int64 `json:"amount_lowercase,omitempty"`

	// Amount symbols
	// Maximum: 2.147483647e+09
	// Minimum: -2.147483648e+09
	AmountSymbols *int64 `json:"amount_symbols,omitempty"`

	// Amount uppercase
	// Maximum: 2.147483647e+09
	// Minimum: -2.147483648e+09
	AmountUppercase *int64 `json:"amount_uppercase,omitempty"`

	// Error message
	// Required: true
	// Min Length: 1
	ErrorMessage *string `json:"error_message"`

	// Length min
	// Maximum: 2.147483647e+09
	// Minimum: -2.147483648e+09
	LengthMin *int64 `json:"length_min,omitempty"`

	// Name
	Name *string `json:"name,omitempty"`

	// Password field
	//
	// Field key to check, field keys defined in Prompt stages are available.
	// Min Length: 1
	PasswordField string `json:"password_field,omitempty"`

	// Policy uuid
	// Read Only: true
	// Format: uuid
	Pk strfmt.UUID `json:"pk,omitempty"`

	// Symbol charset
	// Min Length: 1
	SymbolCharset string `json:"symbol_charset,omitempty"`
}

// Validate validates this password policy
func (m *PasswordPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountLowercase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmountSymbols(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmountUppercase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLengthMin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSymbolCharset(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PasswordPolicy) validateAmountLowercase(formats strfmt.Registry) error {

	if swag.IsZero(m.AmountLowercase) { // not required
		return nil
	}

	if err := validate.MinimumInt("amount_lowercase", "body", int64(*m.AmountLowercase), -2.147483648e+09, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("amount_lowercase", "body", int64(*m.AmountLowercase), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *PasswordPolicy) validateAmountSymbols(formats strfmt.Registry) error {

	if swag.IsZero(m.AmountSymbols) { // not required
		return nil
	}

	if err := validate.MinimumInt("amount_symbols", "body", int64(*m.AmountSymbols), -2.147483648e+09, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("amount_symbols", "body", int64(*m.AmountSymbols), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *PasswordPolicy) validateAmountUppercase(formats strfmt.Registry) error {

	if swag.IsZero(m.AmountUppercase) { // not required
		return nil
	}

	if err := validate.MinimumInt("amount_uppercase", "body", int64(*m.AmountUppercase), -2.147483648e+09, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("amount_uppercase", "body", int64(*m.AmountUppercase), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *PasswordPolicy) validateErrorMessage(formats strfmt.Registry) error {

	if err := validate.Required("error_message", "body", m.ErrorMessage); err != nil {
		return err
	}

	if err := validate.MinLength("error_message", "body", string(*m.ErrorMessage), 1); err != nil {
		return err
	}

	return nil
}

func (m *PasswordPolicy) validateLengthMin(formats strfmt.Registry) error {

	if swag.IsZero(m.LengthMin) { // not required
		return nil
	}

	if err := validate.MinimumInt("length_min", "body", int64(*m.LengthMin), -2.147483648e+09, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("length_min", "body", int64(*m.LengthMin), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *PasswordPolicy) validatePasswordField(formats strfmt.Registry) error {

	if swag.IsZero(m.PasswordField) { // not required
		return nil
	}

	if err := validate.MinLength("password_field", "body", string(m.PasswordField), 1); err != nil {
		return err
	}

	return nil
}

func (m *PasswordPolicy) validatePk(formats strfmt.Registry) error {

	if swag.IsZero(m.Pk) { // not required
		return nil
	}

	if err := validate.FormatOf("pk", "body", "uuid", m.Pk.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PasswordPolicy) validateSymbolCharset(formats strfmt.Registry) error {

	if swag.IsZero(m.SymbolCharset) { // not required
		return nil
	}

	if err := validate.MinLength("symbol_charset", "body", string(m.SymbolCharset), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PasswordPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PasswordPolicy) UnmarshalBinary(b []byte) error {
	var res PasswordPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
