// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Provider provider
//
// swagger:model Provider
type Provider struct {

	// type
	// Read Only: true
	Type string `json:"__type__,omitempty"`

	// Authorization flow
	//
	// Flow used when authorizing this provider.
	// Required: true
	// Format: uuid
	AuthorizationFlow *strfmt.UUID `json:"authorization_flow"`

	// ID
	// Read Only: true
	Pk int64 `json:"pk,omitempty"`

	// property mappings
	// Unique: true
	PropertyMappings []strfmt.UUID `json:"property_mappings"`
}

// Validate validates this provider
func (m *Provider) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorizationFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePropertyMappings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Provider) validateAuthorizationFlow(formats strfmt.Registry) error {

	if err := validate.Required("authorization_flow", "body", m.AuthorizationFlow); err != nil {
		return err
	}

	if err := validate.FormatOf("authorization_flow", "body", "uuid", m.AuthorizationFlow.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Provider) validatePropertyMappings(formats strfmt.Registry) error {

	if swag.IsZero(m.PropertyMappings) { // not required
		return nil
	}

	if err := validate.UniqueItems("property_mappings", "body", m.PropertyMappings); err != nil {
		return err
	}

	for i := 0; i < len(m.PropertyMappings); i++ {

		if err := validate.FormatOf("property_mappings"+"."+strconv.Itoa(i), "body", "uuid", m.PropertyMappings[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Provider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Provider) UnmarshalBinary(b []byte) error {
	var res Provider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
