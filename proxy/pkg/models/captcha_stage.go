// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CaptchaStage captcha stage
//
// swagger:model CaptchaStage
type CaptchaStage struct {

	// Name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// Stage uuid
	// Read Only: true
	// Format: uuid
	Pk strfmt.UUID `json:"pk,omitempty"`

	// Private key
	//
	// Private key, acquired from https://www.google.com/recaptcha/intro/v3.html
	// Required: true
	// Min Length: 1
	PrivateKey *string `json:"private_key"`

	// Public key
	//
	// Public key, acquired from https://www.google.com/recaptcha/intro/v3.html
	// Required: true
	// Min Length: 1
	PublicKey *string `json:"public_key"`
}

// Validate validates this captcha stage
func (m *CaptchaStage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CaptchaStage) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *CaptchaStage) validatePk(formats strfmt.Registry) error {

	if swag.IsZero(m.Pk) { // not required
		return nil
	}

	if err := validate.FormatOf("pk", "body", "uuid", m.Pk.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CaptchaStage) validatePrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("private_key", "body", m.PrivateKey); err != nil {
		return err
	}

	if err := validate.MinLength("private_key", "body", string(*m.PrivateKey), 1); err != nil {
		return err
	}

	return nil
}

func (m *CaptchaStage) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.Required("public_key", "body", m.PublicKey); err != nil {
		return err
	}

	if err := validate.MinLength("public_key", "body", string(*m.PublicKey), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CaptchaStage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CaptchaStage) UnmarshalBinary(b []byte) error {
	var res CaptchaStage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
