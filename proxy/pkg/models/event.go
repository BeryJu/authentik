// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Event event
//
// swagger:model Event
type Event struct {

	// Action
	// Required: true
	// Enum: [LOGIN LOGIN_FAILED LOGOUT AUTHORIZE_APPLICATION SUSPICIOUS_REQUEST SIGN_UP PASSWORD_RESET INVITE_CREATED INVITE_USED CUSTOM]
	Action *string `json:"action"`

	// App
	// Required: true
	// Min Length: 1
	App *string `json:"app"`

	// Client ip
	// Min Length: 1
	ClientIP *string `json:"client_ip,omitempty"`

	// Context
	Context string `json:"context,omitempty"`

	// Created
	// Read Only: true
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// Date
	// Read Only: true
	// Format: date-time
	Date strfmt.DateTime `json:"date,omitempty"`

	// Event uuid
	// Read Only: true
	// Format: uuid
	Pk strfmt.UUID `json:"pk,omitempty"`

	// User
	User *int64 `json:"user,omitempty"`
}

// Validate validates this event
func (m *Event) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePk(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var eventTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOGIN","LOGIN_FAILED","LOGOUT","AUTHORIZE_APPLICATION","SUSPICIOUS_REQUEST","SIGN_UP","PASSWORD_RESET","INVITE_CREATED","INVITE_USED","CUSTOM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventTypeActionPropEnum = append(eventTypeActionPropEnum, v)
	}
}

const (

	// EventActionLOGIN captures enum value "LOGIN"
	EventActionLOGIN string = "LOGIN"

	// EventActionLOGINFAILED captures enum value "LOGIN_FAILED"
	EventActionLOGINFAILED string = "LOGIN_FAILED"

	// EventActionLOGOUT captures enum value "LOGOUT"
	EventActionLOGOUT string = "LOGOUT"

	// EventActionAUTHORIZEAPPLICATION captures enum value "AUTHORIZE_APPLICATION"
	EventActionAUTHORIZEAPPLICATION string = "AUTHORIZE_APPLICATION"

	// EventActionSUSPICIOUSREQUEST captures enum value "SUSPICIOUS_REQUEST"
	EventActionSUSPICIOUSREQUEST string = "SUSPICIOUS_REQUEST"

	// EventActionSIGNUP captures enum value "SIGN_UP"
	EventActionSIGNUP string = "SIGN_UP"

	// EventActionPASSWORDRESET captures enum value "PASSWORD_RESET"
	EventActionPASSWORDRESET string = "PASSWORD_RESET"

	// EventActionINVITECREATED captures enum value "INVITE_CREATED"
	EventActionINVITECREATED string = "INVITE_CREATED"

	// EventActionINVITEUSED captures enum value "INVITE_USED"
	EventActionINVITEUSED string = "INVITE_USED"

	// EventActionCUSTOM captures enum value "CUSTOM"
	EventActionCUSTOM string = "CUSTOM"
)

// prop value enum
func (m *Event) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eventTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Event) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

func (m *Event) validateApp(formats strfmt.Registry) error {

	if err := validate.Required("app", "body", m.App); err != nil {
		return err
	}

	if err := validate.MinLength("app", "body", string(*m.App), 1); err != nil {
		return err
	}

	return nil
}

func (m *Event) validateClientIP(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientIP) { // not required
		return nil
	}

	if err := validate.MinLength("client_ip", "body", string(*m.ClientIP), 1); err != nil {
		return err
	}

	return nil
}

func (m *Event) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Event) validateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Event) validatePk(formats strfmt.Registry) error {

	if swag.IsZero(m.Pk) { // not required
		return nil
	}

	if err := validate.FormatOf("pk", "body", "uuid", m.Pk.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Event) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Event) UnmarshalBinary(b []byte) error {
	var res Event
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
