// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConsentStage consent stage
//
// swagger:model ConsentStage
type ConsentStage struct {

	// Consent expires in
	//
	// Offset after which consent expires. (Format: hours=1;minutes=2;seconds=3).
	// Min Length: 1
	ConsentExpireIn string `json:"consent_expire_in,omitempty"`

	// Mode
	// Enum: [always_require permanent expiring]
	Mode string `json:"mode,omitempty"`

	// Name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// Stage uuid
	// Read Only: true
	// Format: uuid
	Pk strfmt.UUID `json:"pk,omitempty"`
}

// Validate validates this consent stage
func (m *ConsentStage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConsentExpireIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePk(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConsentStage) validateConsentExpireIn(formats strfmt.Registry) error {

	if swag.IsZero(m.ConsentExpireIn) { // not required
		return nil
	}

	if err := validate.MinLength("consent_expire_in", "body", string(m.ConsentExpireIn), 1); err != nil {
		return err
	}

	return nil
}

var consentStageTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["always_require","permanent","expiring"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		consentStageTypeModePropEnum = append(consentStageTypeModePropEnum, v)
	}
}

const (

	// ConsentStageModeAlwaysRequire captures enum value "always_require"
	ConsentStageModeAlwaysRequire string = "always_require"

	// ConsentStageModePermanent captures enum value "permanent"
	ConsentStageModePermanent string = "permanent"

	// ConsentStageModeExpiring captures enum value "expiring"
	ConsentStageModeExpiring string = "expiring"
)

// prop value enum
func (m *ConsentStage) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, consentStageTypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConsentStage) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

func (m *ConsentStage) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *ConsentStage) validatePk(formats strfmt.Registry) error {

	if swag.IsZero(m.Pk) { // not required
		return nil
	}

	if err := validate.FormatOf("pk", "body", "uuid", m.Pk.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConsentStage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConsentStage) UnmarshalBinary(b []byte) error {
	var res ConsentStage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
