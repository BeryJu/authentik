// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OAuthSource o auth source
//
// swagger:model OAuthSource
type OAuthSource struct {

	// Access Token URL
	//
	// URL used by passbook to retrive tokens.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	AccessTokenURL *string `json:"access_token_url"`

	// Authentication flow
	//
	// Flow to use when authenticating existing users.
	// Format: uuid
	AuthenticationFlow *strfmt.UUID `json:"authentication_flow,omitempty"`

	// Authorization URL
	//
	// URL the user is redirect to to conest the flow.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	AuthorizationURL *string `json:"authorization_url"`

	// Consumer key
	// Required: true
	// Min Length: 1
	ConsumerKey *string `json:"consumer_key"`

	// Consumer secret
	// Required: true
	// Min Length: 1
	ConsumerSecret *string `json:"consumer_secret"`

	// Enabled
	Enabled bool `json:"enabled,omitempty"`

	// Enrollment flow
	//
	// Flow to use when enrolling new users.
	// Format: uuid
	EnrollmentFlow *strfmt.UUID `json:"enrollment_flow,omitempty"`

	// Name
	//
	// Source's display Name.
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// Pbm uuid
	// Read Only: true
	// Format: uuid
	Pk strfmt.UUID `json:"pk,omitempty"`

	// Profile URL
	//
	// URL used by passbook to get user information.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	ProfileURL *string `json:"profile_url"`

	// Provider type
	// Required: true
	// Max Length: 255
	// Min Length: 1
	ProviderType *string `json:"provider_type"`

	// Request Token URL
	//
	// URL used to request the initial token. This URL is only required for OAuth 1.
	// Max Length: 255
	RequestTokenURL string `json:"request_token_url,omitempty"`

	// Slug
	//
	// Internal source name, used in URLs.
	// Required: true
	// Max Length: 50
	// Min Length: 1
	// Pattern: ^[-a-zA-Z0-9_]+$
	Slug *string `json:"slug"`
}

// Validate validates this o auth source
func (m *OAuthSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessTokenURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthenticationFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorizationURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsumerKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsumerSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnrollmentFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfileURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestTokenURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OAuthSource) validateAccessTokenURL(formats strfmt.Registry) error {

	if err := validate.Required("access_token_url", "body", m.AccessTokenURL); err != nil {
		return err
	}

	if err := validate.MinLength("access_token_url", "body", string(*m.AccessTokenURL), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("access_token_url", "body", string(*m.AccessTokenURL), 255); err != nil {
		return err
	}

	return nil
}

func (m *OAuthSource) validateAuthenticationFlow(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthenticationFlow) { // not required
		return nil
	}

	if err := validate.FormatOf("authentication_flow", "body", "uuid", m.AuthenticationFlow.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OAuthSource) validateAuthorizationURL(formats strfmt.Registry) error {

	if err := validate.Required("authorization_url", "body", m.AuthorizationURL); err != nil {
		return err
	}

	if err := validate.MinLength("authorization_url", "body", string(*m.AuthorizationURL), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("authorization_url", "body", string(*m.AuthorizationURL), 255); err != nil {
		return err
	}

	return nil
}

func (m *OAuthSource) validateConsumerKey(formats strfmt.Registry) error {

	if err := validate.Required("consumer_key", "body", m.ConsumerKey); err != nil {
		return err
	}

	if err := validate.MinLength("consumer_key", "body", string(*m.ConsumerKey), 1); err != nil {
		return err
	}

	return nil
}

func (m *OAuthSource) validateConsumerSecret(formats strfmt.Registry) error {

	if err := validate.Required("consumer_secret", "body", m.ConsumerSecret); err != nil {
		return err
	}

	if err := validate.MinLength("consumer_secret", "body", string(*m.ConsumerSecret), 1); err != nil {
		return err
	}

	return nil
}

func (m *OAuthSource) validateEnrollmentFlow(formats strfmt.Registry) error {

	if swag.IsZero(m.EnrollmentFlow) { // not required
		return nil
	}

	if err := validate.FormatOf("enrollment_flow", "body", "uuid", m.EnrollmentFlow.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OAuthSource) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *OAuthSource) validatePk(formats strfmt.Registry) error {

	if swag.IsZero(m.Pk) { // not required
		return nil
	}

	if err := validate.FormatOf("pk", "body", "uuid", m.Pk.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OAuthSource) validateProfileURL(formats strfmt.Registry) error {

	if err := validate.Required("profile_url", "body", m.ProfileURL); err != nil {
		return err
	}

	if err := validate.MinLength("profile_url", "body", string(*m.ProfileURL), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("profile_url", "body", string(*m.ProfileURL), 255); err != nil {
		return err
	}

	return nil
}

func (m *OAuthSource) validateProviderType(formats strfmt.Registry) error {

	if err := validate.Required("provider_type", "body", m.ProviderType); err != nil {
		return err
	}

	if err := validate.MinLength("provider_type", "body", string(*m.ProviderType), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("provider_type", "body", string(*m.ProviderType), 255); err != nil {
		return err
	}

	return nil
}

func (m *OAuthSource) validateRequestTokenURL(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestTokenURL) { // not required
		return nil
	}

	if err := validate.MaxLength("request_token_url", "body", string(m.RequestTokenURL), 255); err != nil {
		return err
	}

	return nil
}

func (m *OAuthSource) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("slug", "body", m.Slug); err != nil {
		return err
	}

	if err := validate.MinLength("slug", "body", string(*m.Slug), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("slug", "body", string(*m.Slug), 50); err != nil {
		return err
	}

	if err := validate.Pattern("slug", "body", string(*m.Slug), `^[-a-zA-Z0-9_]+$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OAuthSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OAuthSource) UnmarshalBinary(b []byte) error {
	var res OAuthSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
