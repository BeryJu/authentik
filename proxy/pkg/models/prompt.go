// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Prompt prompt
//
// swagger:model Prompt
type Prompt struct {

	// Field key
	//
	// Name of the form field, also used to store the value
	// Required: true
	// Max Length: 50
	// Min Length: 1
	// Pattern: ^[-a-zA-Z0-9_]+$
	FieldKey *string `json:"field_key"`

	// Label
	// Required: true
	// Min Length: 1
	Label *string `json:"label"`

	// Order
	// Maximum: 2.147483647e+09
	// Minimum: -2.147483648e+09
	Order *int64 `json:"order,omitempty"`

	// Prompt uuid
	// Read Only: true
	// Format: uuid
	Pk strfmt.UUID `json:"pk,omitempty"`

	// Placeholder
	Placeholder string `json:"placeholder,omitempty"`

	// Required
	Required bool `json:"required,omitempty"`

	// Type
	// Required: true
	// Enum: [text username email password number checkbox data data-time separator hidden static]
	Type *string `json:"type"`
}

// Validate validates this prompt
func (m *Prompt) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFieldKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Prompt) validateFieldKey(formats strfmt.Registry) error {

	if err := validate.Required("field_key", "body", m.FieldKey); err != nil {
		return err
	}

	if err := validate.MinLength("field_key", "body", string(*m.FieldKey), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("field_key", "body", string(*m.FieldKey), 50); err != nil {
		return err
	}

	if err := validate.Pattern("field_key", "body", string(*m.FieldKey), `^[-a-zA-Z0-9_]+$`); err != nil {
		return err
	}

	return nil
}

func (m *Prompt) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	if err := validate.MinLength("label", "body", string(*m.Label), 1); err != nil {
		return err
	}

	return nil
}

func (m *Prompt) validateOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.Order) { // not required
		return nil
	}

	if err := validate.MinimumInt("order", "body", int64(*m.Order), -2.147483648e+09, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("order", "body", int64(*m.Order), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *Prompt) validatePk(formats strfmt.Registry) error {

	if swag.IsZero(m.Pk) { // not required
		return nil
	}

	if err := validate.FormatOf("pk", "body", "uuid", m.Pk.String(), formats); err != nil {
		return err
	}

	return nil
}

var promptTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["text","username","email","password","number","checkbox","data","data-time","separator","hidden","static"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		promptTypeTypePropEnum = append(promptTypeTypePropEnum, v)
	}
}

const (

	// PromptTypeText captures enum value "text"
	PromptTypeText string = "text"

	// PromptTypeUsername captures enum value "username"
	PromptTypeUsername string = "username"

	// PromptTypeEmail captures enum value "email"
	PromptTypeEmail string = "email"

	// PromptTypePassword captures enum value "password"
	PromptTypePassword string = "password"

	// PromptTypeNumber captures enum value "number"
	PromptTypeNumber string = "number"

	// PromptTypeCheckbox captures enum value "checkbox"
	PromptTypeCheckbox string = "checkbox"

	// PromptTypeData captures enum value "data"
	PromptTypeData string = "data"

	// PromptTypeDataTime captures enum value "data-time"
	PromptTypeDataTime string = "data-time"

	// PromptTypeSeparator captures enum value "separator"
	PromptTypeSeparator string = "separator"

	// PromptTypeHidden captures enum value "hidden"
	PromptTypeHidden string = "hidden"

	// PromptTypeStatic captures enum value "static"
	PromptTypeStatic string = "static"
)

// prop value enum
func (m *Prompt) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, promptTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Prompt) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Prompt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Prompt) UnmarshalBinary(b []byte) error {
	var res Prompt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
