// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FlowStageBinding flow stage binding
//
// swagger:model FlowStageBinding
type FlowStageBinding struct {

	// Order
	// Required: true
	// Maximum: 2.147483647e+09
	// Minimum: -2.147483648e+09
	Order *int64 `json:"order"`

	// Fsb uuid
	// Read Only: true
	// Format: uuid
	Pk strfmt.UUID `json:"pk,omitempty"`

	// policies
	// Read Only: true
	// Unique: true
	Policies []strfmt.UUID `json:"policies"`

	// Re evaluate policies
	//
	// When this option is enabled, the planner will re-evaluate policies bound to this.
	ReEvaluatePolicies bool `json:"re_evaluate_policies,omitempty"`

	// Stage
	// Required: true
	// Format: uuid
	Stage *strfmt.UUID `json:"stage"`

	// Target
	// Required: true
	// Format: uuid
	Target *strfmt.UUID `json:"target"`
}

// Validate validates this flow stage binding
func (m *FlowStageBinding) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FlowStageBinding) validateOrder(formats strfmt.Registry) error {

	if err := validate.Required("order", "body", m.Order); err != nil {
		return err
	}

	if err := validate.MinimumInt("order", "body", int64(*m.Order), -2.147483648e+09, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("order", "body", int64(*m.Order), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *FlowStageBinding) validatePk(formats strfmt.Registry) error {

	if swag.IsZero(m.Pk) { // not required
		return nil
	}

	if err := validate.FormatOf("pk", "body", "uuid", m.Pk.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FlowStageBinding) validatePolicies(formats strfmt.Registry) error {

	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	if err := validate.UniqueItems("policies", "body", m.Policies); err != nil {
		return err
	}

	for i := 0; i < len(m.Policies); i++ {

		if err := validate.FormatOf("policies"+"."+strconv.Itoa(i), "body", "uuid", m.Policies[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *FlowStageBinding) validateStage(formats strfmt.Registry) error {

	if err := validate.Required("stage", "body", m.Stage); err != nil {
		return err
	}

	if err := validate.FormatOf("stage", "body", "uuid", m.Stage.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FlowStageBinding) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	if err := validate.FormatOf("target", "body", "uuid", m.Target.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FlowStageBinding) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FlowStageBinding) UnmarshalBinary(b []byte) error {
	var res FlowStageBinding
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
