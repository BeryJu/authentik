// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OAuth2Provider o auth2 provider
//
// swagger:model OAuth2Provider
type OAuth2Provider struct {

	// Authorization flow
	//
	// Flow used when authorizing this provider.
	// Required: true
	// Format: uuid
	AuthorizationFlow *strfmt.UUID `json:"authorization_flow"`

	// Client ID
	// Max Length: 255
	// Min Length: 1
	ClientID string `json:"client_id,omitempty"`

	// Client Secret
	// Max Length: 255
	ClientSecret string `json:"client_secret,omitempty"`

	// Client Type
	//
	// <b>Confidential</b> clients are capable of maintaining the confidentiality
	//     of their credentials. <b>Public</b> clients are incapable.
	// Enum: [confidential public]
	ClientType string `json:"client_type,omitempty"`

	// JWT Algorithm
	//
	// Algorithm used to sign the JWT Token
	// Enum: [HS256 RS256]
	JwtAlg string `json:"jwt_alg,omitempty"`

	// Name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// ID
	// Read Only: true
	Pk int64 `json:"pk,omitempty"`

	// Post Logout Redirect URIs
	//
	// Enter each URI on a new line.
	PostLogoutRedirectUris string `json:"post_logout_redirect_uris,omitempty"`

	// property mappings
	// Unique: true
	PropertyMappings []strfmt.UUID `json:"property_mappings"`

	// Redirect URIs
	//
	// Enter each URI on a new line.
	// Min Length: 1
	RedirectUris string `json:"redirect_uris,omitempty"`

	// Response type
	//
	// Response Type required by the client.
	// Enum: [code id_token id_token token code token code id_token code id_token token]
	ResponseType string `json:"response_type,omitempty"`

	// RSA Key
	//
	// Key used to sign the tokens. Only required when JWT Algorithm is set to RS256.
	// Format: uuid
	RsaKey *strfmt.UUID `json:"rsa_key,omitempty"`
}

// Validate validates this o auth2 provider
func (m *OAuth2Provider) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorizationFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJwtAlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePropertyMappings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedirectUris(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRsaKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OAuth2Provider) validateAuthorizationFlow(formats strfmt.Registry) error {

	if err := validate.Required("authorization_flow", "body", m.AuthorizationFlow); err != nil {
		return err
	}

	if err := validate.FormatOf("authorization_flow", "body", "uuid", m.AuthorizationFlow.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OAuth2Provider) validateClientID(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientID) { // not required
		return nil
	}

	if err := validate.MinLength("client_id", "body", string(m.ClientID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("client_id", "body", string(m.ClientID), 255); err != nil {
		return err
	}

	return nil
}

func (m *OAuth2Provider) validateClientSecret(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientSecret) { // not required
		return nil
	}

	if err := validate.MaxLength("client_secret", "body", string(m.ClientSecret), 255); err != nil {
		return err
	}

	return nil
}

var oAuth2ProviderTypeClientTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["confidential","public"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oAuth2ProviderTypeClientTypePropEnum = append(oAuth2ProviderTypeClientTypePropEnum, v)
	}
}

const (

	// OAuth2ProviderClientTypeConfidential captures enum value "confidential"
	OAuth2ProviderClientTypeConfidential string = "confidential"

	// OAuth2ProviderClientTypePublic captures enum value "public"
	OAuth2ProviderClientTypePublic string = "public"
)

// prop value enum
func (m *OAuth2Provider) validateClientTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oAuth2ProviderTypeClientTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OAuth2Provider) validateClientType(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientType) { // not required
		return nil
	}

	// value enum
	if err := m.validateClientTypeEnum("client_type", "body", m.ClientType); err != nil {
		return err
	}

	return nil
}

var oAuth2ProviderTypeJwtAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HS256","RS256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oAuth2ProviderTypeJwtAlgPropEnum = append(oAuth2ProviderTypeJwtAlgPropEnum, v)
	}
}

const (

	// OAuth2ProviderJwtAlgHS256 captures enum value "HS256"
	OAuth2ProviderJwtAlgHS256 string = "HS256"

	// OAuth2ProviderJwtAlgRS256 captures enum value "RS256"
	OAuth2ProviderJwtAlgRS256 string = "RS256"
)

// prop value enum
func (m *OAuth2Provider) validateJwtAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oAuth2ProviderTypeJwtAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OAuth2Provider) validateJwtAlg(formats strfmt.Registry) error {

	if swag.IsZero(m.JwtAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateJwtAlgEnum("jwt_alg", "body", m.JwtAlg); err != nil {
		return err
	}

	return nil
}

func (m *OAuth2Provider) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *OAuth2Provider) validatePropertyMappings(formats strfmt.Registry) error {

	if swag.IsZero(m.PropertyMappings) { // not required
		return nil
	}

	if err := validate.UniqueItems("property_mappings", "body", m.PropertyMappings); err != nil {
		return err
	}

	for i := 0; i < len(m.PropertyMappings); i++ {

		if err := validate.FormatOf("property_mappings"+"."+strconv.Itoa(i), "body", "uuid", m.PropertyMappings[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *OAuth2Provider) validateRedirectUris(formats strfmt.Registry) error {

	if swag.IsZero(m.RedirectUris) { // not required
		return nil
	}

	if err := validate.MinLength("redirect_uris", "body", string(m.RedirectUris), 1); err != nil {
		return err
	}

	return nil
}

var oAuth2ProviderTypeResponseTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["code","id_token","id_token token","code token","code id_token","code id_token token"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oAuth2ProviderTypeResponseTypePropEnum = append(oAuth2ProviderTypeResponseTypePropEnum, v)
	}
}

const (

	// OAuth2ProviderResponseTypeCode captures enum value "code"
	OAuth2ProviderResponseTypeCode string = "code"

	// OAuth2ProviderResponseTypeIDToken captures enum value "id_token"
	OAuth2ProviderResponseTypeIDToken string = "id_token"

	// OAuth2ProviderResponseTypeIDTokenToken captures enum value "id_token token"
	OAuth2ProviderResponseTypeIDTokenToken string = "id_token token"

	// OAuth2ProviderResponseTypeCodeToken captures enum value "code token"
	OAuth2ProviderResponseTypeCodeToken string = "code token"

	// OAuth2ProviderResponseTypeCodeIDToken captures enum value "code id_token"
	OAuth2ProviderResponseTypeCodeIDToken string = "code id_token"

	// OAuth2ProviderResponseTypeCodeIDTokenToken captures enum value "code id_token token"
	OAuth2ProviderResponseTypeCodeIDTokenToken string = "code id_token token"
)

// prop value enum
func (m *OAuth2Provider) validateResponseTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oAuth2ProviderTypeResponseTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OAuth2Provider) validateResponseType(formats strfmt.Registry) error {

	if swag.IsZero(m.ResponseType) { // not required
		return nil
	}

	// value enum
	if err := m.validateResponseTypeEnum("response_type", "body", m.ResponseType); err != nil {
		return err
	}

	return nil
}

func (m *OAuth2Provider) validateRsaKey(formats strfmt.Registry) error {

	if swag.IsZero(m.RsaKey) { // not required
		return nil
	}

	if err := validate.FormatOf("rsa_key", "body", "uuid", m.RsaKey.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OAuth2Provider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OAuth2Provider) UnmarshalBinary(b []byte) error {
	var res OAuth2Provider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
