// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Application application
//
// swagger:model Application
type Application struct {

	// Meta description
	MetaDescription string `json:"meta_description,omitempty"`

	// Meta icon url
	MetaIconURL string `json:"meta_icon_url,omitempty"`

	// Meta launch url
	// Max Length: 200
	// Format: uri
	MetaLaunchURL strfmt.URI `json:"meta_launch_url,omitempty"`

	// Meta publisher
	MetaPublisher string `json:"meta_publisher,omitempty"`

	// Name
	//
	// Application's display Name.
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// Pbm uuid
	// Read Only: true
	// Format: uuid
	Pk strfmt.UUID `json:"pk,omitempty"`

	// policies
	// Read Only: true
	// Unique: true
	Policies []strfmt.UUID `json:"policies"`

	// Provider
	Provider *int64 `json:"provider,omitempty"`

	// Slug
	//
	// Internal application name, used in URLs.
	// Required: true
	// Max Length: 50
	// Min Length: 1
	// Pattern: ^[-a-zA-Z0-9_]+$
	Slug *string `json:"slug"`
}

// Validate validates this application
func (m *Application) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetaLaunchURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Application) validateMetaLaunchURL(formats strfmt.Registry) error {

	if swag.IsZero(m.MetaLaunchURL) { // not required
		return nil
	}

	if err := validate.MaxLength("meta_launch_url", "body", string(m.MetaLaunchURL), 200); err != nil {
		return err
	}

	if err := validate.FormatOf("meta_launch_url", "body", "uri", m.MetaLaunchURL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Application) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *Application) validatePk(formats strfmt.Registry) error {

	if swag.IsZero(m.Pk) { // not required
		return nil
	}

	if err := validate.FormatOf("pk", "body", "uuid", m.Pk.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Application) validatePolicies(formats strfmt.Registry) error {

	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	if err := validate.UniqueItems("policies", "body", m.Policies); err != nil {
		return err
	}

	for i := 0; i < len(m.Policies); i++ {

		if err := validate.FormatOf("policies"+"."+strconv.Itoa(i), "body", "uuid", m.Policies[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *Application) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("slug", "body", m.Slug); err != nil {
		return err
	}

	if err := validate.MinLength("slug", "body", string(*m.Slug), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("slug", "body", string(*m.Slug), 50); err != nil {
		return err
	}

	if err := validate.Pattern("slug", "body", string(*m.Slug), `^[-a-zA-Z0-9_]+$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Application) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Application) UnmarshalBinary(b []byte) error {
	var res Application
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
