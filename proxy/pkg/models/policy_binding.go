// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicyBinding policy binding
//
// swagger:model PolicyBinding
type PolicyBinding struct {

	// Enabled
	Enabled bool `json:"enabled,omitempty"`

	// Order
	// Required: true
	// Maximum: 2.147483647e+09
	// Minimum: -2.147483648e+09
	Order *int64 `json:"order"`

	// Policy
	// Required: true
	// Format: uuid
	Policy *strfmt.UUID `json:"policy"`

	// Target
	// Required: true
	// Format: uuid
	Target *strfmt.UUID `json:"target"`

	// Timeout
	//
	// Timeout after which Policy execution is terminated.
	// Maximum: 2.147483647e+09
	// Minimum: -2.147483648e+09
	Timeout *int64 `json:"timeout,omitempty"`
}

// Validate validates this policy binding
func (m *PolicyBinding) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeout(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyBinding) validateOrder(formats strfmt.Registry) error {

	if err := validate.Required("order", "body", m.Order); err != nil {
		return err
	}

	if err := validate.MinimumInt("order", "body", int64(*m.Order), -2.147483648e+09, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("order", "body", int64(*m.Order), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *PolicyBinding) validatePolicy(formats strfmt.Registry) error {

	if err := validate.Required("policy", "body", m.Policy); err != nil {
		return err
	}

	if err := validate.FormatOf("policy", "body", "uuid", m.Policy.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PolicyBinding) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	if err := validate.FormatOf("target", "body", "uuid", m.Target.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PolicyBinding) validateTimeout(formats strfmt.Registry) error {

	if swag.IsZero(m.Timeout) { // not required
		return nil
	}

	if err := validate.MinimumInt("timeout", "body", int64(*m.Timeout), -2.147483648e+09, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("timeout", "body", int64(*m.Timeout), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyBinding) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyBinding) UnmarshalBinary(b []byte) error {
	var res PolicyBinding
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
